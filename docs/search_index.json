[
["advgraphics.html", "Глава 6 Продвинутая графика в R 6.1 Предварительные требования 6.2 Загрузка данных Евростата 6.3 Базовый шаблон ggplot 6.4 Геометрические типы и преобразования 6.5 Графические переменные и группировки 6.6 Системы координат 6.7 Разметка осей и подписи 6.8 Фасеты 6.9 Темы 6.10 Контрольные вопросы и упражнения", " Глава 6 Продвинутая графика в R 6.1 Предварительные требования Для работы по теме текущей лекции вам понадобятся пакеты ggplot2 и dplyr из tidyverse. Помимо этого, мы будем работать напрямую с данными Евростата, к которым можно обращаться напрямую с использованием пакета eurostat: library(&#39;eurostat&#39;) library(&#39;dplyr&#39;) library(&#39;tidyr&#39;) library(&#39;ggplot2&#39;) В настоящей главе мы кратко познакомимся с системой ggplot2. gg расшифровывается как grammar of graphics. Под этим понимается определенная (какая — мы узнаем далее) система правил, позволяющих описывать и строить графики. ggplot довольно сильно отличается от стандартной графической подсистемы R. Прежде всего — модульным подходом к построению изображений. В ggplot вы собираете графики «по кирпичикам», отдельно определяя источник данных, способы изображения, параметры системы координат и т.д. – путем вызова и сложения результатов соответствующих функций. При построении элементарных графиков ggplot может показаться (и по факту так и есть) сложнее, чем стандартная графическая подсистема. Однако при усложнении требований к внешнему виду и информационному насыщению графика сложность ggplot оказывается преимуществом, и с ее помощью относительно просто можно получать элегантные и информативные визуализации, на создание которых с помощью стандартной подсистемы пришлось бы затратить невероятные усилия! В этой главе мы кратко познакомимся с ggplot, а далее на протяжении курса будем регулярно ее использовать, осваивая новые возможности. 6.2 Загрузка данных Евростата Таблицы данных Евростата имеют уникальные коды, по которым их можно загружать, используя API (Application programming interface). В этой лекции мы будем работать с данными о крупнейших международных партнерах Евросоюза по импорту и экспорту основны видов товаров. Например, таблица данных по продуктам питания, напиткам и табаку имеет код tet00034. Для чтения таблиц по кодам в пакете eurostat имеется функция get_eurostat(). Чтобы год измерения получить в виде числа, а не объекта типа Date, используем второй параметр time_format = num. Для перехода от кодов продукции и стран к их полным наименованиям, дополнительно вызовем функцию label_eurostat() из того же пакета: library(eurostat) tables = c(&#39;tet00034&#39;, &#39;tet00033&#39;, &#39;tet00032&#39;, &#39;tet00031&#39;,&#39;tet00030&#39;, &#39;tet00029&#39;) trades = lapply(tables, function(X) { # прочтем несколько таблиц в список get_eurostat(X) %&gt;% label_eurostat() }) %&gt;% bind_rows() %&gt;% # объединим прочитанные таблицы в одну select(-geo) %&gt;% # убираем столбец с территорией торговли, т.к. там только Евросоюз filter(stringr::str_detect(indic_et, &#39;Exports in|Imports in&#39;)) %&gt;% # оставим только экспорт и импорт spread(indic_et, values) %&gt;% # вынесем данные по экспорту и импорту в отдельные переменные rename(export = `Exports in million of ECU/EURO`, # дадим им краткие названия import = `Imports in million of ECU/EURO`) %&gt;% mutate(partner = as.factor(partner)) 6.3 Базовый шаблон ggplot Для начала посмотрим, как можно показать суммарный экспорт по годам: trades_total = trades %&gt;% group_by(time) %&gt;% summarise(export = sum(export), import = sum(import)) ggplot(data = trades_total) + geom_point(mapping = aes(x = time, y = export)) Базовый (минимально необходимый) шаблон построения графика через ggplot выглядит следующим образом: ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) где: DATA — источник данных (фрейм, тиббл) GEOM_FUNCTION — функция, отвечающая за геометрический тип графика (точки, линии, гистограммы и т.д.) MAPPINGS — перечень соответствий между переменными данных (содержащихся в DATA) и графическими переменными (координатами, размерами, цветами и т.д.) 6.4 Геометрические типы и преобразования ggplot предлагает несколько десятков различных видов геометрий для отображения данных. С их полным перечнем пожно познакомиться тут. Мы рассмотрим несколько наиболее употребительных, а геометрии, связанные со статистическими преобразованиями, оставим для следующей темы. В первом примере мы отображали данные по экспорту за разные года, однако точечный тип не очень подходит для данного типа графика, поскольку он показывает динамику изменения. А это означает, что желательно соединить точки линиями. Для этого используем геометрию geom_line(): ggplot(data = trades_total) + geom_line(mapping = aes(x = time, y = export)) Поскольку в данном случае величина является агрегированной за год, более правильным может быть показ ее изменений в виде ступенчатого линейного графика, который получается через геометрию geom_step(): ggplot(data = trades_total) + geom_step(mapping = aes(x = time, y = export)) Можно совместить несколко геометрий, добавив их последовательно на график: ggplot(data = trades_total) + geom_line(mapping = aes(x = time, y = export)) + geom_point(mapping = aes(x = time, y = export)) Если у нескольких геометрий одинаковые отображения, их можно вынести в вызов функции ggplot() (чтобы не дублировать): ggplot(data = trades_total, mapping = aes(x = time, y = export)) + geom_line() + geom_point() Наглядность линейного графика можно усилить, добавив “заливку” области с использованием geom_area(): ggplot(data = trades_total, mapping = aes(x = time, y = export)) + geom_area(alpha = 0.5) + # полигон с прозрачностью 0,5 geom_line() + geom_point() Для построения столбчатой диаграммы следует использовать геометрию geom_col(). Например, вот так выглядит структура экспорта продукции машиностроения из Евросоюза по ведущим партнерам: trades %&gt;% dplyr::filter(sitc06 == &#39;Machinery and transport equipment&#39;, time == as.Date(&#39;2017-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = partner, y = export)) + geom_col() Развернуть диаграмму можно, используя функцию coord_flip(): trades %&gt;% dplyr::filter(sitc06 == &#39;Machinery and transport equipment&#39;, time == as.Date(&#39;2017-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = partner, y = export)) + geom_col() + coord_flip() 6.5 Графические переменные и группировки Графические переменные — это параметры, определяющие внешний вид символов. К ним относятся цвет (тон, насыщенность и светлота), размер, форма, ориентировка, внутренняя структура символа. В ggplot значения графических переменных могут быть едиными для всех измерений, а могут зависеть от величины измерений. С точки зрения управления здесь все просто: если вы хотите, чтобы какой-то графический параметр зависел от значения показателя, он должен быть указан внутри конструкции mapping = aes(...). Если необходимо, чтобы этот параметр был одинаковым для всех измерений, вы должны его указать внутри &lt;GEOM_FUNCTION&gt;(...), то есть не передавать в mapping. Для управления цветом, формой и размером (толщиной) графического примитива следует использовать параметры color, shape и size соответственно. Посмотрим, как они работают внутри и за пределами функции aes(): # один цвет для графика (параметр за пределами aes) ggplot(trades_total) + geom_line(mapping = aes(x = time, y = export), color = &#39;blue&#39;) trade_russia = trades %&gt;% filter(partner == &#39;Russia&#39;) ggplot(trade_russia) + # у каждой группы данных свой цвет (параметр внутри aes) geom_line(mapping = aes(x = time, y = export, color = sitc06)) ggplot(trade_russia, mapping = aes(x = time, y = export, color = sitc06)) + # а теперь и с точками geom_line() + geom_point() Аналогичным образом работает параметр формы значка: # один значок для графика ggplot(trades_total) + geom_point(mapping = aes(x = time, y = export), shape = 15) ggplot(trade_russia) + # у каждой группы данных свой значок geom_point(mapping = aes(x = time, y = export, shape = sitc06)) Для изменения размера значка или линии используйте переметр size: # изменение размера значка и линии ggplot(trades_total, mapping = aes(x = time, y = export)) + geom_point(size = 5) + geom_line(size = 2) Если вы используете зависимые от значений графические переменные и при этом хотите добавить на график еще одну геометрию (c постоянными параметрами), то вам необходимо сгруппировать объекты второй геометрии по той же переменной, по которой вы осуществляете разбиение в первой геометрии. Для этого используйте параметр group: ggplot(trade_russia, aes(x = time, y = export)) + geom_point(aes(shape = sitc06)) + geom_line(aes(group = sitc06)) Для изменения цвета столбчатых диаграмм следует использовать параметр fill, а цвет и толщина обводки определяются параметрами color и size: trades %&gt;% dplyr::filter(sitc06 == &#39;Machinery and transport equipment&#39;, time == as.Date(&#39;2017-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = partner, y = export)) + geom_col(fill = &#39;plum4&#39;, color = &#39;black&#39;, size = 0.2) + coord_flip() Цвет на столбчатых диаграммах можно использовать для отображения дополнительных переменных, например типа экспортируемой продукции. По умолчанию столбики будут образовывать стек trades %&gt;% dplyr::filter(time == as.Date(&#39;2017-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = partner, y = export, fill = sitc06)) + geom_col(color = &#39;black&#39;, size = 0.2) + coord_flip() Если вам важно не абсолютное количество, а процентное соотношение величин, вы можете применить вид группировки position == 'fill: trades %&gt;% dplyr::filter(time == as.Date(&#39;2017-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = partner, y = export, fill = sitc06)) + geom_col(color = &#39;black&#39;, size = 0.2, position = &#39;fill&#39;) + coord_flip() Еще один вид группировки — это группировка по соседству. Чтобы использовать ее, применить метод position == 'dodge: trade_russia %&gt;% filter(time &gt;= as.Date(&#39;2013-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = time, y = export, fill = sitc06)) + geom_col(color = &#39;black&#39;, size = 0.2, position = &#39;dodge&#39;) 6.6 Системы координат ggplot поддерживает множество полезных преобразований координат, таких как смена осей X и Y, переход к логарифимическим координатам и использование полярной системы вместо декартовой прямоугольной. Смена переменных происходит благодаря уже знакомой нам функции coord_flip(). Рассмотрим, например, как изменилась структура эспорта/импорта по годам: trades_type = trades %&gt;% group_by(sitc06, time) %&gt;% summarise(export = sum(export), import = sum(import)) ggplot(trades_type) + geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5) ggplot(trades_type) + geom_point(mapping = aes(x = export, y = import, color = sitc06, size = time), alpha = 0.5) + coord_flip() Поскольку объемы продукции различаются на порядки, для различимости малых объемов целесообразно перейти к логарифмической шкале. Для этого используем scale_log_x() и scale_log_y(): ggplot(trades_type, mapping = aes(x = export, y = import, color = sitc06, size = time)) + geom_point(alpha = 0.5) + scale_x_log10() + scale_y_log10() Преобразование в полярную систему координат используется для того чтобы получить круговую секторную диаграмму Найтингейл (coxcomb chart): trades %&gt;% dplyr::filter(sitc06 == &#39;Machinery and transport equipment&#39;, time == as.Date(&#39;2017-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = partner, y = export, fill = partner)) + geom_col() + coord_polar() Разумеется, здесь тоже можно использовать преобразование шкалы по оси Y (которая теперь отвечает за радиус). Применим правило квадратного корня, добавив вызов функции scale_y_sqrt(): trades %&gt;% dplyr::filter(sitc06 == &#39;Machinery and transport equipment&#39;, time == as.Date(&#39;2017-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = partner, y = export, fill = partner)) + geom_col() + coord_polar() + scale_y_sqrt() Чтобы построить классическую секторную диаграмму, необходимо, чтобы угол поворота соответствовал величине показателя (оси Y), а не названию категории (оси X). Для этого при вызове функции coord_polar() следует указать параметр theta = 'y', а при вызове geom_col() оставить параметр x пустым: trades %&gt;% dplyr::filter(sitc06 == &#39;Machinery and transport equipment&#39;, time == as.Date(&#39;2017-01-01&#39;)) %&gt;% ggplot(mapping = aes(x = &#39;&#39;, y = export, fill = partner), color = &#39;black&#39;, size = 0.2) + geom_col() + coord_polar(theta = &#39;y&#39;) 6.7 Разметка осей и подписи 6.8 Фасеты 6.9 Темы 6.10 Контрольные вопросы и упражнения 6.10.1 Вопросы 6.10.2 Упражнения "]
]
