[
["index.html", "Визуализация и анализ географических данных на языке R Введение Программное обеспечение Установка и подключение пакетов Выполнение программного кода Установка рабочей директории Диагностические функции Получение справки Комментарии Стандарт оформления кода на R Зарезервированные слова Названия переменных Названия специальных символов Ссылка на пособие", " Визуализация и анализ географических данных на языке R Тимофей Самсонов 2017-11-03 Введение Добро пожаловать в курс “Визуализация и анализ географических данных на языке R”! В данном курсе мы освоим азы программирования на языке R, а затем научимся использовать его для решения географических задач. Никаких предварительных знаний и навыков программирования не требуется. Программное обеспечение Для успешного прохождения курса на вашем компьютере должно быть установлено следующее программное обеспечение: Язык R Среда разработки RStudio Выбирайте инсталлятор, соответствующий вашей операционной системе. Обратите внимание на то, что RStudio не будет работать, пока вы не установите базовые библиотеки языка R. Поэтому обе вышеуказанные компоненты ПО обязательны для установки. Установка и подключение пакетов Существует множество дополнительных пакетов R (вы тоже можете написать свой) практически на все случаи жизни. Как и дистрибутив R, они доступны через CRAN (Comprehensive R Archive Network). Одним из таких пакетов является, например, пакет openxlsx, позволяющий читать и записывать файлы в форматах Microsoft Excel. Существует два способа установки пакетов в RStudio. Во-первых, вы можете сделать это в графическом интерфесе, нажав кнопку Install на панели Packages (по умолчанию эта панель расположена в нижней правой четверти окна программы). В появившемся окне введите название пакета и нажмите Install: Установка пакета Во-вторых, вы можете вызвать из консоли команду install.packages(), передав ей в качестве параметра название пакета, заключенное в кавычки: install.packages(&quot;openxlsx&quot;) Никогда не включайте команду install.packages() в тело скрипта. Это приведет к тому, что каждый раз при запуске программы среда RStudio будет пытаться заново установить пакет, который уже установлен. Запускайте эту функцию только из консоли. Если по каким-то причинам вы не можете установить пакет в стандартную системную директорию RStudio (например, из-за политик безопасности, запрещающих запись в каталог Program Files на ОС Windows), то необходимо создать директорию вручную в другом месте (куда вы имеете полный доступ) и указать ее адрес в параметре lib функции install.packages(). Например: install.packages(&quot;xlsx&quot;, lib = &quot;C:/Rlib/&quot;) Подключение пакета осуществляется с помощью функции library(), при этом название пакета можно в кавычки не заключать: library(openxlsx) Если пакет установлен не в стандартный каталог, а в другое место — например, в каталог С:/Rlib/ (см. выше) — то при вызове функции library() необходимо указать местоположение пакета в дополнительном параметре lib.loc: library(xlsx, lib.loc = &quot;C:/Rlib&quot;) Выполнение программного кода Существует несколько способов выполнения исходного кода: Выполнить одну строку: поставить курсор в любую строку и нажать над редактором кода кнопку Run или сочетание клавиш Ctrl+Enter (Cmd+Enter для OS X). Выполнить несколько строк: выделить необходимые строки и нажать над редактором кода кнопку Run или сочетание клавиш Ctrl+Enter (Cmd+Enter для OS X). Выполнить весь код можно сразу тремя способами: Выделить весь текст и нажать над редактором кода кнопку Run или сочетание клавиш Ctrl+Enter (Cmd+Enter для OS X) Нажать клавиатурное сочетание Ctrl+Alt+Enter (Cmd+Alt+Enter для OS X) Нажать в правом верхнем углу редактора кода кнопку Source Команды Source и Ctrl+Alt+Enter могут не сработать, если у вас не установлена рабочая директория, или если в пути к рабочей директории содержатся кириллические символы (не актуально для Windows 10+ и OS X, которые являются системами, основанными на кодировке Unicode). Существует также ряд дополнительных опций выполнения кода, которые вы можете найти в меню Code &gt; Run Region Выполняя код построчно, делайте это последовательно, начиная с первой строки программы. Одна из самых распространенных ошибок новичков заключается в попытке выполнить некую строку, не выполнив предыдущий код. Нет никаких гарантий, что что-то получится, если открыть файл, поставить курсор в произвольную строку посередине программы и попытаться выполнить ее. Возможно, вам и повезет — если эта строка никак не зависит от предыдущего кода. Однако в реальных программах такие строки составляют лишь небольшую долю от общего объема. Как правило, в них происходит инициализация новых переменных стартовыми значениями. Установка рабочей директории Вы можете открывать и сохранять любые поддерживаемые файлы в R, указывая полный системный путь к файлу. Например, так может выглядеть открытие и сохранение таблицы в формате CSV на компьютере Mac: d &lt;- read.csv(&quot;/Volumes/Data/GitHub/r-geo-course/data/oxr_vod.csv&quot;) write.csv(d, &quot;/Volumes/Data/GitHub/r-geo-course/data/oxr_vod_copy.csv&quot;) Однако, если вам требуется открыть или сохранить несколько файлов (и не только данных, но и графиков, карт и т.п.), программа будет выглядеть громоздко. К тому же, прописывать каждый раз полный путь достаточно утомительно и неприятно (даже путем копирования и вставки), а главное — может привести к ошибкам. Чтобы облегчить работу с файлами, в R существует понятие домашней директории. Домашняя директория задается для текущей сессии R с помощью функции setwd(). После установки домашней директории R будет полагать, что все открываемые и сохраняемые файлы должны находиться в ней: setwd(&quot;/Volumes/Data/GitHub/r-geo-course/data&quot;) read.csv(&quot;oxr_vod.csv&quot;) write.csv(d, &quot;oxr_vod_copy.csv&quot;) Как видно, мы добавили дополнительную строчку кода, но сэкономили на длине двух других строк. При увеличении количества обращений к файлам польза домашней директории будет возрастать. При этом вы можете открывать и сохранять файлы в поддиректориях, наддиректориях и соседних директориях, используя синтаксис, стандартный для большинства операционных систем: # сохранить файл в поддиректорию data write.csv(d, &quot;data/oxr_vod_copy.csv&quot;) # сохранить файл в наддиректорию по отношению к текущей директории write.csv(d, &quot;../oxr_vod_copy.csv&quot;) # сохранить файл в директорию data, соседнюю по отношению к текущей директории write.csv(d, &quot;../data/oxr_vod_copy.csv&quot;) Если вы перенесли код и данные с другого компьютера (возможно, вы получили их от своего коллеги или скачали с репозитория данного пособия), необходимо заменить путь, указанный в функции setwd() на путь к каталогу, в который вы положили данные. Рабочая директория и местоположение скрипта могут не совпадать. Вы можете хранить их в разных местах. Однако рекомендуется держать их вместе, что облегчит передачу вашей программы вместе с данными другим пользователям. К сожалению, не существует надежного программного способа сказать среде выполнения R, что в качестве домашей директории следует использовать директорию в которой лежит сам скрипт (что, вообще говоря, было бы крайне удобно). Возможно, в будущем разработчики языка добавят такую полезную функцию. Однако, если для работы с R вы пользуетесь средой RStudio, задача может быть решена путем использования проектов. Подробнее читайте здесь. Диагностические функции В R существует ряд диагностических функций, которые позволяют узнавать информацию об объектах, переменных, а также текущих параметрах среды, оказывающих влияние на результаты выполнения программы. Эти функции полезны, когда необходимо понять, какого типа, размера и содержания данные хранятся в той или иной переменной. Нижеприведенный список функций не являются исчерпывающим, но охватывает наиболее употребильные функции: Функция Назначение class() Класс (тип данных или структура данных) объекта str() Компактное представление внутренней структуры объекта. names() Названия элементов объекта colnames() Названия колонок фрейма данных или матрицы rownames() Названия строк фрейма данных или матрицы mode() Режим хранения объекта. length() Размер (длина) объекта. dim() Измерение объекта. sessionInfo() Информация о текущей сессии R и подключенных пакетах. options() Получение и установка параметров среды. getwd() Текущая рабочая директория Получение справки Любая функция R содержит документированное описание ее параметров и правил использования. Справку можно получить несколькими способами: Найти интересующую вас функцию вручную на вкладке Packages, выбрав нужный пакет Воспользоваться строкой поиска на вкладке Help Ввести знак вопроса и название функции в консоли (будет искать только среди подключенных в настоящий момент пакетов): library(openxlsx) ?read.xlsx # равносильно вызову функции help(read.xlsx) Справка по функции Ввести двойной знак вопроса и название функции в консоли (будет искать по всем установленным пакетам, независимо от того, подключены ли они в настоящий момент): ??spsample Поиск по функциям Во многих пакетах есть также подробная документация с примерами использования функций в виде руководств и так называемых виньеток (vignettes), которые представляют из себя расширенные руководства (статьи) по использованию пакета. С документацией пакета можно ознакомиться, щелкнув на его названии на вкладке Packages и перейдя по ссылке User guides, package vignettes and other documentation: Документация пакета Комментарии Комментарии — это фрагменты текста программы, начинающиеся с символа #. Комментарии не воспринимаются как исполняемый код и служат для документирования программы. При выполнении программы содержимое комментария в зависимости от настроек среды может выводиться или не выводиться в консоль, однако их содержание никак не влияет на результаты выполнения программы. Всегда пишите комментарии, чтобы по прошествии времени можно было открыть файл и быстро восстановить в памяти логику программы и смысл отдельных операций. Комментарии особенно необходимы, если вашей программой будет пользоваться кто-то другой — без них будет трудно разобраться в программном коде. Действие комментария продолжается от символа # до конца строки. Соответственно, вы можете поставить данный символ в самом начале строки и тогда комментарий будет занимать всю строку. Комментарий также можно расположить справа от исполняемого кода, и тогда он будет занимать только часть строки. Прервать комментарий и написать справа от него исполняемый код нельзя Полнострочные комментарии часто используются для выделения разделов в программе и написания объемных пояснений. Часто в них вводят имитации разделительных линий с помощью символов дефиса (-) или подчеркивания (_), а заголовки набирают прописными буквами. Короткие комментарии справа от фрагментов кода обычно служат пояснением конкретных простых операций. Подобная логика употребления комментариев не является обязательной. Вы можете оформлять их на свое усмотрение. Главное, чтобы они выполняли свою основную функцию — пояснять смысл выполняемых действий. Например: # ОПЕРАЦИИ С ЧИСЛАМИ # --------------------------- # В данном разделе рассматриваются арифметические операции, такие как сложение, вычитание, деление, деление с остатком, взятие остатка и возведение в степень: a &lt;- 3 + 2 # Сложение b &lt;- 4 ^ 8 # Возведение в степень c &lt;- b %% a # Взятие остатка # Деление d &lt;- c / a # Умножение e &lt;- d * b Однако, усердствовать с комментированием каждой мелочи в программе, разумеется, не стоит. Со временем у вас выработается взвешенный подход к документированию программ и понимание того, какие ее фрагменты требуют пояснения, а какие самоочевидны. Для быстрой вставки комментария, обозначающего новый раздел программы, воспользуйтесь командой меню Code &gt; Insert Section или клавиатурным сочетанием Ctrl+Shift+R (Cmd+Shift+R для OS X) Стандарт оформления кода на R Очень важно сразу же приучить себя грамотно, структурированно и красиво оформлять код на языке R. Это существенно облегчит чтение и понимание ваших программ не только вами, но и другими пользователями и разработчиками. Помимо вышеуказанных рекомендаций по написанию комментариев существует также определенное количество хорошо зарекомендовавших себя и широко используемых практик оформления кода. Эти практики есть в каждом языке программирования и их можно найти в литературе (и в Интернете) в виде негласных сводов правил (style guides) Если вы не хотите быть белой вороной в мире R, вам будет полезно внимательно ознакомиться со стандартом оформления кода на R от компании Google, которая широко использует этот язык в своей работе. Стандарт оформления кода иногда также называют стилем программирования. Мы не будем использовать этот термин, поскольку под стилем программирования традиционно понимают фундаментальный подход (парадигму) к построению программ: процедурный, функциональный, логический, объектно-ориентированный стиль и некоторые другие. К числу негласных правил оформления кода на R можно отнести следующие: Последовательно используйте знак присвоения &lt;- или = на протяжении всей программы. Если вы начали использовать = – применяйте его на протяжении всей программы, не используя &lt;-. Традиционный подход предполагает использование &lt;-, однако все больше программистов использует знак = в своих программах, что делает R более похожим на другие языки программирования. Помните, что использование = официально не рекомендуется, поскольку существует много старого кода на R, который может ошибочно выполняться в сочетании с кодом, использующим =. Но вы, скорее всего, с такими проблемами не столкнетесь. Так что выбор за вами! После запятой всегда ставьте пробел, перед запятой – нет: # Правильно: a &lt;- c(1, 2, 3, 4) m &lt;- matrix(a, 2, 2) # Неправильно: a &lt;- c(1,2,3,4) a &lt;- c(1 ,2 ,3 ,4) a &lt;- c(1 , 2 , 3 , 4) m &lt;- matrix(a,2,2) m &lt;- matrix(a ,2 ,2) m &lt;- matrix(a , 2 , 2) Отделяйте любые бинарные операторы (такие как =, +, -, &lt;-, *) пробелами с двух сторон: a &lt;- sin(b + pi * 0.5) # правильно a&lt;-sin(b+pi*0.5) # неправильно Между названием функции и открывающей скобкой пробела быть не должно. То же самое касается обращения к элементам вектора, матрицы и т.п.: # Правильно: sin(b) a[2] # Неправильно: sin (b) a [2] В то же время, при вызове команд управления выполнением программы (условные операторы и циклы) перед и после скобок пробел должен стоять: # Правильно: if (a &gt; 0) { print(a) } i &lt;- 0 while (i &lt; a) { print(i) i &lt;- i + 1 } # Неправильно: if(a &gt; 0){ print(a) } i &lt;- 0 while(i &lt; a){ print(i) i &lt;- i + 1 } Зарезервированные слова В R существует небольшое количество зарезервированных слов, которые нельзя использовать в качестве имен переменных, функций и проч. Список этих слов можно получить, набрав в консоли ?Reserved. К ним относятся: Слово Назначение if Условный оператор ЕСЛИ else Условный оператор ИНАЧЕ repeat Цикл без внешнего условия while Цикл “пока верно условие, повторять” function Функция for Цикл “пройти по элементам последовательности” in Оператор вхождения в множество next Переход на новую итерацию цикла break Принудительный выход из цикла или условного оператора TRUE Логическое значение ИСТИНА FALSE Логическое значение ЛОЖЬ NULL Пустое значение Inf Бесконечность NaN Нечисловое значние NA Отсутствующее значение NA_integer_ Отсутствующее целое число NA_real_ Отсутствующее число с плавающей точкой NA_complex_ Отсутствующее комплексное число NA_character_ Отсутствующая строка Названия переменных В качестве названий переменных нельзя использовать заразервированные слова, а также не рекомендуется использовать названия общеупотребительных (диагностических) функций и констант. Также не следует давать переменным названия, совпадающие с широко распространенными функциями – например, котороткими функциями из пакета base, такими как t(), с() и т.д., так как это может привести к путанице в программе и даже ошибкам выполнения кода. Каждый раз, создавая переменную, спрашивайте себя, не совпадает ли ее название с названием одной из используемых вами функций. Названия специальных символов В R, как и во многих других языках программирования испльзуются различные специальные символы. Их смысл и значение мы узнаем по ходу изучения языка, а пока что выучите их названия, чтобы грамотно употреблять в своей речи Символ Название $ доллар # шарп &amp; амперсанд (решетка) / прямой слэш \\ обратный слэш | пайп (вертикальная черта) ^ циркумфлекс (крышечка) @ эт (собачка) ~ тильда '' одинарные кавычки &quot;&quot; двойные кавычки `` обратные кавычки Ссылка на пособие Если этот курс лекций оказался полезным для вас, и вы хотите процитировать его с списке литературы вашей работы, то ссылку можно оформить по следующей форме: Самсонов Т.Е. Визуализация и анализ географических данных на языке R. М.: Географический факультет МГУ, 2017. DOI: 10.5281/zenodo.901911 "],
["data-types.html", "Глава 1 Типы данных, ввод и вывод 1.1 Числа 1.2 Строки 1.3 Даты 1.4 Логические 1.5 Определение типа данных 1.6 Преобразование типов данных {conversion} 1.7 Ввод и вывод данных в консоли 1.8 Контрольные вопросы и задачи", " Глава 1 Типы данных, ввод и вывод Программный код главы Тип данных — это класс данных, характеризуемый членами класса и операциями, которые могут быть к ним применены1. С помощью типов данных мы можем представлять привычные нам сущности, такие как числа, строки и т.д. В языке R существует 5 базовых типов данных: Название Тип данных complex комплексные числа character строки integer целые числа logical логические (булевы) numeric числа с плавающей точкой Помимо этого есть тип Date, который позволяет работать с датами. Рассмотрим использование каждого из перечисленных типов. 1.1 Числа Числа — основной тип данных в R. К ним относятся числа c плавающей точкой и целые числа. В терминологии R такие данные называются интервальными, поскольку к ним применимо понятие интервала на числовой прямой. Целые числа относятся к дискретным интервальным, а числа с плавающей точкой — к непрерывным интервальным. Числа можно складывать, вычитать и умножать: 2 + 3 ## [1] 5 2 - 3 ## [1] -1 2 * 3 ## [1] 6 Разделителем целой и дробной части является точка, а не запятая: 2.5 + 3.1 ## [1] 5.6 Существует также специальный оператор для возведения в степень. Для этого вы можете использовать или двойной знак умножения (**) или циркумфлекс (^), который в обиходе называют просто “крышечкой”: 2 ^ 3 ## [1] 8 2 ** 3 ## [1] 8 Результат деления по умолчанию имеет тип с плавающей точкой: 5 / 3 ## [1] 1.666667 5 / 2.5 ## [1] 2 Если вы хотите чтобы деление производилось целочисленным образом (без дробной части) необходимо использовать оператор %/%: 5 %/% 3 ## [1] 1 Остаток от деления можно получить с помощью оператора %%: 5 %% 3 ## [1] 2 Вышеприведенные арифметические операции являются бинарными, то есть требуют наличия двух чисел. Числа называются “операндами”. Отделять операнды от оператора пробелом или нет — дело вкуса. Я предпочитаю отделять, так как это повышает читаемость кода. Следующие два выражения эквивалентны. Однако сравните простоту их восприятия: 5%/%3 ## [1] 1 5 %/% 3 ## [1] 1 Как правило, в настоящих программах числа в явном виде встречаются лишь иногда. Вместо этого для их обозначения используют переменные. В вышеприведенных выражениях мы неоднократно использовали число 3. Теперь представьте, что вы хотите проверить, каковы будут результаты, если вместо 3 использовать 4. Вам придется заменить все тройки на четверки. Если их много, то это будет утомительная работа, и вы наверняка что-то пропустите. Конечно, можно использовать поиск с автозаменой, но что если тройки надо заменить не везде? Одно и то же число может выполнять разные функции в разных выражениях. Чтобы избежать подобных проблем, в программе вводят переменные и присваивают им значения. Оператор присваивания значения выглядит как &lt;- a &lt;- 5 b &lt;- 3 Чтобы вывести значение переменной на экран, достаточно просто ввести его: a ## [1] 5 b ## [1] 3 Мы можем выполнить над переменными все те же операции что и над константами: a + b ## [1] 8 a - b ## [1] 2 a / b ## [1] 1.666667 a %/% b ## [1] 1 a %% b ## [1] 2 Легко меняем значение второй переменной с 3 на 4 и выполняем код заново. b &lt;- 4 a + b ## [1] 9 a - b ## [1] 1 a / b ## [1] 1.25 a %/% b ## [1] 1 a %% b ## [1] 1 Нам пришлось изменить значение переменной только один раз в момент ее создания, все последующие операции остались неизменны, но их результаты обновились! Новую переменную можно создать на основе значений существующих переменных: c &lt;- b d &lt;- a+c Посмотрим, что получилось: c ## [1] 4 d ## [1] 9 Вы можете комбинировать переменные и заданные явным образом константы: e &lt;- d + 2.5 e ## [1] 11.5 Противоположное по знаку число получается добавлением унарного оператора - перед константой или переменной: f &lt;- -2 f ## [1] -2 f &lt;- -e f ## [1] -11.5 Операция взятия остатка от деления бывает полезной, например, когда мы хотим выяснить, является число четным или нет. Для этого достаточно взять остаток от деления на 2. Если число является четным, остаток будет равен нулю. В данном случае c равно 4, d равно 9: c %% 2 ## [1] 0 d %% 2 ## [1] 1 1.1.1 Числовые функции Прежде чем мы перейдем к рассмотрению прочих типов данных и структур данных нам необходимо познакомиться с функциями, поскольку они встречаются буквально на каждом шагу. Понятие функции идентично тому, к чему мы привыкли в математике. Например, функция может называться Z, и принимать 2 аргумента: x и y. В этом случае она записывается как Z(x,y). Чтобы получить значение функции, необходимо подставить некоторые значения вместо x и y в скобках. Нас даже может не интересовать, как фактически устроена функция внутри, но важно понимать, что именно она должна вычислять. С созданием функций мы познакомимся позднее. Важнейшие примеры функций — математические. Это функции взятия корня sqrt(x), модуля abs(x), округления round(x, digits), натурального логарифма abs(x), тригонометрические функции sin(x), cos(x), tan(x), обратные к ним asin(y), acos(y), atan(y) и многие другие. Основные математические функции содержатся в пакете base, который по умолчанию доступен в среде R и не требует подключения. В качестве аргумента функции можно использовать переменную, константу, а также выражения: sqrt(a) ## [1] 2.236068 sin(a) ## [1] -0.9589243 tan(1.5) ## [1] 14.10142 abs(a + b - 2.5) ## [1] 6.5 Вы также можете легко вкладывать функции одна в одну, если результат вычисления одной функции нужно подставить в другую: sin(sqrt(a)) ## [1] 0.7867491 sqrt(sin(a) + 2) ## [1] 1.020331 Также как и с арифметическими выражениями, результат вычисления функции можно записать в переменную: b &lt;- sin(sqrt(a)) b ## [1] 0.7867491 Если переменной b ранее было присвоено другое значение, оно перезапишется. Вы также можете записать в переменную результат операции, выполненной над ней же. Например, если вы не уверены, что a — неотрицательное число, а вам это необходимо в дальнейших расчетах, вы можете применить к нему операцию взятия модуля: b &lt;- sin(a) b ## [1] -0.9589243 b &lt;- abs(b) b ## [1] 0.9589243 1.2 Строки Строки — также еще один важнейший тип данных. Строки состоят из символов. Чтобы создать строковую переменную, необходимо заключить текст строки в кавычки: s &lt;- &quot;В историю трудно войти, но легко вляпаться (М.Жванецкий)&quot; s ## [1] &quot;В историю трудно войти, но легко вляпаться (М.Жванецкий)&quot; Длину строки в символах можно узнать с помощью функции nchar() nchar(s) ## [1] 56 Строки можно складывать так же как и числа. Эта операция называется конкатенацией. В результате конкатенации строки состыковываются друг с другом и получается одна строка. В отличие от чисел, конкатенация производится не оператором +, а специальной функцией paste(). Состыковываемые строки нужно перечислить через запятую, их число может быть произвольно s1 &lt;- &quot;В историю трудно войти,&quot; s2 &lt;- &quot;но легко вляпаться&quot; s3 &lt;- &quot;(М.Жванецкий)&quot; Посмотрим содержимое подстрок: s1 ## [1] &quot;В историю трудно войти,&quot; s2 ## [1] &quot;но легко вляпаться&quot; s3 ## [1] &quot;(М.Жванецкий)&quot; А теперь объединим их в одну: s &lt;- paste(s1, s2) s ## [1] &quot;В историю трудно войти, но легко вляпаться&quot; s &lt;- paste(s1, s2, s3) s ## [1] &quot;В историю трудно войти, но легко вляпаться (М.Жванецкий)&quot; Настоящая сила конкатенации проявляется когда вам необходимо объединить в одной строке некоторое текстовое описание (заранее известное) и значения переменных, которые у вас вычисляются в программе (заранее неизвестные). Предположим, вы нашли в программе что максимальная численность населения в Детройте пришлась на 1950 год и составила 1850 тыс. человек. Найденный год записан у вас в переменную year, а население в переменную pop. Вы их значения пока что не знаете, они вычислены по табличным данным в программе. Как вывести эту информацию на экран “человеческим”&quot; образом? Для этого нужно использовать конкатенацию строк. Условно запишем значения переменных, как будто мы их знаем year &lt;- 1950 pop &lt;- 1850 s1 &lt;- &quot;Максимальная численность населения в Детройте пришлась на&quot; s2 &lt;- &quot;год и составила&quot; s3 &lt;- &quot;тыс. чел&quot; s &lt;- paste(s1, year, s2, pop, s3) s ## [1] &quot;Максимальная численность населения в Детройте пришлась на 1950 год и составила 1850 тыс. чел&quot; Обратите внимание на то что мы конкатенировали строки с числами. Конвертация типов осуществилась автоматически. Помимо этого, функция сама вставила пробелы между строками. 1.3 Даты Даты являются необходимыми при работе с временными данными. В географическом анализе подобные задачи возникают сплошь и рядом. Точность указания времени может быть самой различной. От года до долей секунды. Чаще всего используются даты, указанные с точностью до дня. Для создания даты используется функция as.Date(). В данном случае точка — это лишь часть названия функции, а не какой-то особый оператор. В качестве аргумента функции необходимо задать дату, записанную в виде строки. Запишем дату рождения автора (можете заменить ее на свою): birth &lt;- as.Date(&#39;1986/02/18&#39;) ## Warning in strptime(xx, f &lt;- &quot;%Y-%m-%d&quot;, tz = &quot;GMT&quot;): unknown timezone ## &#39;zone/tz/2017c.1.0/zoneinfo/Europe/Moscow&#39; birth ## [1] &quot;1986-02-18&quot; Сегодняшнюю дату вы можете узнать с помощью специальной функции Sys.Date(): current &lt;- Sys.Date() current ## [1] &quot;2017-11-03&quot; Даты также можно складывать и вычитать. В зависимости от дискретности данных, вы получите результат в часах, днях, годах и т.д. Например, узнать продолжительность жизни в днях можно так: livedays &lt;- current - birth livedays ## Time difference of 11581 days Вы также можете прибавить к текущей дате некоторое значение. Например, необходимо узнать, какая дата будет через 40 дней: current + 40 ## [1] &quot;2017-12-13&quot; 1.4 Логические Логические переменные возникают там, где нужно проверить условие. Переменная логического типа может принимать значение TRUE (истина) или FALSE (ложь). Для их обозначения также возможны более компактные константы T и F соответственно. Следующие операторы приводят к возникновению логических переменных: РАВНО (==) — проверка равенства операндов НЕ РАВНО (!=) — проверка неравенства операндов МЕНЬШЕ (&lt;) — первый аргумент меньше второго МЕНЬШЕ ИЛИ РАВНО (&lt;=) — первый аргумент меньше или равен второму БОЛЬШЕ (&gt;) — первый аргумент больше второго БОЛЬШЕ ИЛИ РАВНО (&gt;=) — первый аргумент больше или равен второму Посмотрим, как они работают: a &lt;- 1 b &lt;- 2 a == b ## [1] FALSE a != b ## [1] TRUE a &gt; b ## [1] FALSE a &lt; b ## [1] TRUE Если необходимо проверить несколько условий одновременно, их можно комбинировать с помощью логических операторов. Наиболее популярные среди них: И (&amp;&amp;) - проверка истинности обоих условий ИЛИ (||) - проверка истинности хотя бы одного из условий НЕ (!) - отрицание операнда (истина меняется на ложь, ложь на истину) c&lt;-3 (b&gt;a) &amp;&amp; (c&gt;b) ## [1] TRUE (a&gt;b) &amp;&amp; (c&gt;b) ## [1] FALSE (a&gt;b) || (c&gt;b) ## [1] TRUE !(a&gt;b) ## [1] TRUE Более подробно работу с логическими переменными мы разберем далее при знакомстве с условным оператором if. 1.5 Определение типа данных Определение типа данных осуществляется с помощью функции class() (см. раздел Диагностические функции во Введении) class(1) ## [1] &quot;numeric&quot; class(0.5) ## [1] &quot;numeric&quot; class(1 + 2i) ## [1] &quot;complex&quot; class(&quot;sample&quot;) ## [1] &quot;character&quot; class(TRUE) ## [1] &quot;logical&quot; class(as.Date(&#39;1986-02-18&#39;)) ## [1] &quot;Date&quot; В вышеприведенном примере видно, что R по умолчанию “повышает” ранг целочисленных данных до более общего типа чисел с плавающей точкой, тем самым закладываясь на возможность точного деления без остатка. Если вы хотите, чтобы данные в явном виде интерпретировались как целочисленные, их нужно принудительно привести к этому типу. Операторы преобразования типов рассмотрены ниже. 1.6 Преобразование типов данных {conversion} Преобразование типов данных осуществляется с помощью функций семейства as(d, type), где d — это входная переменная, а type — название типа данных, к которому эти данные надо преобразовать (см. таблицу в начале главы). Несколько примеров: k &lt;- 1 print(k) ## [1] 1 class(k) ## [1] &quot;numeric&quot; l &lt;- as(k, &quot;integer&quot;) print(l) ## [1] 1 class(l) ## [1] &quot;integer&quot; m &lt;- as(l, &quot;character&quot;) print(m) ## [1] &quot;1&quot; class(m) ## [1] &quot;character&quot; n &lt;- as(m, &quot;numeric&quot;) print(n) ## [1] 1 class(n) ## [1] &quot;numeric&quot; Для функции as() существуют обертки (wrappers), которые позволяют записывать такие преобразования более компактно и выглядят как as.&lt;dataype&gt;(d), где datatype — название типа данных: k &lt;- 1 l &lt;- as.integer(k) print(l) ## [1] 1 class(l) ## [1] &quot;integer&quot; m &lt;- as.character(l) print(m) ## [1] &quot;1&quot; class(m) ## [1] &quot;character&quot; n &lt;- as.numeric(m) print(n) ## [1] 1 class(n) ## [1] &quot;numeric&quot; d &lt;- as.Date(&#39;1986-02-18&#39;) print(d) ## [1] &quot;1986-02-18&quot; class(d) ## [1] &quot;Date&quot; Если преобразовать число c плавающей точкой до целого, то дробная часть будет отброшена: as.integer(2.7) ## [1] 2 После преобразования типа данных, разумеется, к переменной будут применимы только те функции, которые определены для данного типа данных: a &lt;- 2.5 b &lt;- as.character(a) b + 2 ## Error in b + 2: нечисловой аргумент для бинарного оператора nchar(b) ## [1] 3 1.7 Ввод и вывод данных в консоли Для ввода данных через консоль можно воспользоваться функцией readline(), которая будет ожидать пользовательский ввод и нажатие клавиши Enter, после чего вернет введенные данные в виде строки. Предположим, пользователь вызывает эту функцию и вводит с клавиатуры 1024: a &lt;- readline() Выведем результат на экран: a ## [1] &quot;1024&quot; Функция readline() всегда возвращает строку, поэтому если вы ожидаете ввод числа, полученное значение необходимо явным образом преобразовать к числовому типу. Для вывода данных в консоль можно воспользоваться тремя способами: Просто напечатать название переменной с новой строки (не работает при запуске программы командой Source) Вызвать функцию print() Вызвать функцию cat() Первый способ мы уже регулярно использовали ранее в настоящей главе. Следует обратить внимание на то, что он хорош для отладки программы, но выглядит некрасиво в рабочих программах, поскольку просто печатая название переменной с новой строки вы как бы явно не говорите о том, что хотите вывести ее значение в консоль, а лишь подразумеваете это. Более того, если скрипт запускается командой Source, данный метод вывода перемнной просто не сработает, интерпретатор его проигнорирует. Поэтому после отладки следует убрать из программы все лишние выводы в консоль, а оставшиеся (действительно нужные) оформить с помощью функций print() или cat(). Функция print() работает точно так же, как и просто название переменной с новой строки, отличаясь лишь двумя особенностями: print() явным образом говорит о том, что вы хотите вывести в консоль некую информацию print() работает при любых методах запуска программы, в том числе методом Source. Например: a &lt;- 1024 a ## [1] 1024 print(a) ## [1] 1024 b &lt;- &quot;Fourty winks in progress&quot; b ## [1] &quot;Fourty winks in progress&quot; print(b) ## [1] &quot;Fourty winks in progress&quot; print(paste(&quot;2 в степени 10 равно&quot;, 2^10)) ## [1] &quot;2 в степени 10 равно 1024&quot; print(paste(&quot;Сегодняшняя дата - &quot;, Sys.Date())) ## [1] &quot;Сегодняшняя дата - 2017-11-03&quot; Функция cat() отличается от print() следующими особенностями: cat() выводит значение переменной, и не печатает ее измерения и внешние атрибуты типа двойных кавычек вокруг строки. Это означает, что cat() можно использовать и для записи данных в файл (на практике этим мало кто пользуется, но знать такую возможность надо). cat() принимает множество аргументов и может осуществлять конкатенацию строк аналогично функции paste() cat() не возвращает никакого значений, в то время как print() возвращает значение, переданное ей в качестве аргумента. cat() можно использовать только для атомарных типов данных. Для классов (таких как Date) она будет выводит содержимое объекта, которое может не совпадать с тем, что пользователь ожидает вывести Например: cat(a) ## 1024 cat(b) ## Fourty winks in progress cat(&quot;2 в степени 10 равно&quot;, 2^10) ## 2 в степени 10 равно 1024 cat(&quot;Сегодняшнаяя дата -&quot;, Sys.Date()) ## Сегодняшнаяя дата - 17473 Можно видеть, что в последнем случае cat() напечатала отнюдь не дату в ее привычном представлении, а некое число, которое является внутренним представлением даты в типе данных Date. Такие типы данных являются классами объектов в R, и у них есть своя функция print(), которая и выдает содержимое объекта в виде, который ожидается пользователем. Поэтому пользоваться функцией cat() надо с некоторой осторожностью. 1.8 Контрольные вопросы и задачи 1.8.1 Вопросы Какие типы данных поддерживаются в R? Каковы их англоязычные наименования? Что такое переменная? Какой оператор используется для записи значения в переменную? С помощью какой функции можно узнать тип переменной? С помощью какого семейства функций можно преобразовывать типы переменных? Можно ли использовать ранее созданное имя переменной для хранения новых данных другого типа? Можно ли записать в переменную результат выполнения выражения, в котором она сама же и участвует? Какая функция позволяет прочитать пользовательский ввод с клавиатуры в консоли? Какой тип данных будет иметь возвращаемое значение? Какую функцию можно использовать для вывода значения переменной в консоль? Чем отличается использование этой функции от случая, когда вы просто пишете название переменной в строке программы? Какой символ является разделителем целой и дробной части при записи чисел с плавающей точкой? Что такое операторы и операнды? Приведите примеры бинарных и унарных операторов. Какое значение будет имет результат деления на ноль? Какие функции выполняют операторы %%, %/%, ^, **? Как проверить, является ли число четным? Как определить количество символов в строке? Как называется операция состыковки нескольких строк и с помощью какой функции она выполняется? Как добиться того, чтобы при этом не добавлялись пробелы между строками? С помощью какой функции можно создать дату из строки? Как извлечь из даты год? Месяц? День? Какая функция позволяет получить дату сегодняшнего дня? Можно ли складывать даты и числа? Если да, то в каких единицах измерения будет выражен результат? Какова краткая форма записи логических значений TRUE и FALSE? Каким числам соответствуют логические значения TRUE и FALSE? Сколько операндов должно быть верно, чтобы оператор логического И (&amp;&amp;) принял значение TRUE? Что можно сказать в этом отношении об операторе ИЛИ (||)? Можно ли применять арифметические операции к логическим переменным? Что произойдет, если прибавить или вычесть из числа a значение TRUE? А если заменить TRUE на FALSE? 1.8.2 Задачи Напишите выражение для вычисления длины отрезка по координатам его вершин, хранящимся в переменных x1, y1, x2, y2 Не используя оператор != запишите условие неравенства чисел a и b с помощью других логичеcких операторов. Напишите программу, которая считывает из консоли введенную пользователем строку и выводит в консоль количество символов в этой строке. Вывод оформите следующим образом: &quot;Длина введенной строки равняется ... символам&quot;, где вместо многоточия стоит вычисленная длина. Напишите программу, которая определяет количество дней в феврале года, который хранится в переменной y. Протестируйте программу, меняя значение y. Самсонов Т.Е. Визуализация и анализ географических данных на языке R. М.: Географический факультет МГУ, 2017. DOI: 10.5281/zenodo.901911 ISO/IEC/IEEE 24765-2010 Systems and software engineering — Vocabulary↩ "],
["data-structures.html", "Глава 2 Структуры данных 2.1 Векторы 2.2 Матрицы 2.3 Массивы 2.4 Фреймы данных 2.5 Списки 2.6 Факторы 2.7 Контрольные вопросы и задачи", " Глава 2 Структуры данных Программный код главы Структура данных — это программная единица, позволяющая хранить и обрабатывать множество однотипных и/или логически связанных данных. Структуры данных также являются типами данных, но не простыми, а составными. Поэтому обычно, когда говорят “тип данных”, подразумевают именно простые типы данных, рассмотренные в предыдущей главе. В R общеупотребительны следующие структуры данных: векторы, матрицы, массивы, фреймы данных, списки и факторы. Последний тип данных не всегда относят к структурам, хотя это логично, поскольку факторы построены по принципу ассоциативных массивов. 2.1 Векторы Вектор представляет собой упорядоченную последовательность объектов одного типа. Вектор может состоять только из чисел, только из строк, только из дат или только из логических значений и т.д. Числовой вектор легко представить себе в виде набора цифр, выстроенных в ряд и пронумерованных согласно порядку их расстановки. Вектор является простейшей и одновременно базовой структурой данных в R. Понимание принципов работы с векторами необходимо для дальнейшего знакомства с более сложными структурами данных, такими как матрицы, массивы, фреймы данных, списки и факторы. 2.1.1 Создание вектора Существует множество способов создания векторов. Среди них наиболее употребительны: Явное перечисление элементов Создание пустого вектора (“болванки”), состоящего из заданного числа элементов Генерация последовательности значений Для создания вектора путем перечисления элементов используется функция c(): # вектор из строк — цвета некоторых веток Московского метро colors &lt;- c(&quot;Красная&quot;, &quot;Зеленая&quot;, &quot;Синяя&quot;, &quot;Коричневая&quot;, &quot;Оранжевая&quot;) colors ## [1] &quot;Красная&quot; &quot;Зеленая&quot; &quot;Синяя&quot; &quot;Коричневая&quot; &quot;Оранжевая&quot; # вектор из чисел — длина веток в километрах (в той же последовательности) lengths &lt;- c(28, 40, 45, 19, 38) lengths ## [1] 28 40 45 19 38 # вектор из булевых переменных — наличие открытых наземных участков (в той же последовательности) opens &lt;- c(FALSE, TRUE, TRUE, FALSE, FALSE) opens ## [1] FALSE TRUE TRUE FALSE FALSE Внимание: не используйте латинскую букву ‘c’ в качестве названия переменной! Это приведет к конфликту названия встроенной функции c() и определенной вами переменной Помимо этого, распространены сценарии, когда вам нужно создать вектор, но заполнять его значениями вы будете по ходу выполнения программы — скажем, при последовательной обработке строк таблицы. В этом случае вам известно только предполагаемое количество элементов вектора и их тип. Здесь лучше всего подойдет создание пустого вектора, которое выполняется функцией vector(). Функция принимает 2 параметра: mode отвечает за тип данных и может принимать значения равные &quot;logical&quot;, &quot;integer&quot;, &quot;numeric&quot; (или &quot;double&quot;), &quot;complex&quot;, &quot;character&quot; и &quot;raw&quot; length отвечает за количество элементов Например: # Вектор из 5 элементов, который предполагается заполнить целыми числами intvalues &lt;- vector(mode = &quot;integer&quot;, length = 5) intvalues # по умолчанию заполнен нулями ## [1] 0 0 0 0 0 # Вектор из 10 элементов, который предполагается заполнить символьными данными (строками) charvalues &lt;- vector(&quot;character&quot;, 10) charvalues # по умолчанию заполнен пустыми строками ## [1] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; Обратите внимание на то, что в первом случае подстановка параметров произведена в виде параметр = значение, а во втором указаны только значения. В данном примере оба способа эквивалентны. Однако первый способ безопаснее и понятнее. Если вы указываете только значения параметров, нужно помнить, что интерпретатор будет подставлять их именно в том порядке, в котором они перечислены в описании функции. Описание функции можно посмотреть, набрав ее название в консоли ее название со знаком вопроса в качестве префикса. Например, для вышеуказанной функции надо набрать ?vector Наконец, третий распространенный способ создания векторов — это генерация последовательности. Чтобы сформировать вектор из натуральных чисел от M до N, можно воспользоваться специальной конструкцией: M:N: index &lt;- 1:5 # эквивалентно c(1,2,3,4,5) index ## [1] 1 2 3 4 5 index &lt;- 2:4 # эквивалентно c(2,3,4) index ## [1] 2 3 4 Существует и более общий способ создания последовательности — функция seq(), которая позволяет генерировать вектора значений нужной длины и/или с нужным шагом: seq(from = 1, by = 2, length.out = 10) # 10 нечетных чисел, начиная с единицы ## [1] 1 3 5 7 9 11 13 15 17 19 seq(from = 2, to = 20, by = 3) # от 2 до 20 с шагом 3 (сколько поместится) ## [1] 2 5 8 11 14 17 20 seq(length.out = 10, to = 2, by = -2) # убывающая последовательность из 10 четных чисел с последним элементом, равным 2 ## [1] 20 18 16 14 12 10 8 6 4 2 Как видно, параметры функции seq() можно комбинировать различными способами и указывать в произвольном порядке (при условии, что вы используете полную форму (параметр = значение). Главное, чтобы их совокупность однозначно описывала последовательность. Хотя, скажем, последний пример убывающей последовательности нельзя признать удачным с точки зрения наглядности. Аналогичным образом можно создавать последовательности дат: seq(from = as.Date(&#39;2016/09/01&#39;), by = 1, length.out = 7) # Даты первой недели учебного 2016/2017 года ## Warning in strptime(xx, f &lt;- &quot;%Y-%m-%d&quot;, tz = &quot;GMT&quot;): unknown timezone ## &#39;zone/tz/2017c.1.0/zoneinfo/Europe/Moscow&#39; ## [1] &quot;2016-09-01&quot; &quot;2016-09-02&quot; &quot;2016-09-03&quot; &quot;2016-09-04&quot; &quot;2016-09-05&quot; ## [6] &quot;2016-09-06&quot; &quot;2016-09-07&quot; seq(from = Sys.Date(), by = 7, length.out = 5) # Пять дат через неделю, начиная с сегодняшнего дня ## [1] &quot;2017-11-03&quot; &quot;2017-11-10&quot; &quot;2017-11-17&quot; &quot;2017-11-24&quot; &quot;2017-12-01&quot; 2.1.2 Работа с элементами вектора К отдельным элементам вектора можно обращаться по их индексам: colors[1] # первый элемент вектора ## [1] &quot;Красная&quot; colors[3] # третий элемент ## [1] &quot;Синяя&quot; ВНИМАНИЕ: элементы векторов и других структур данных в языке R индексируются от 1 до N, где N — это длина вектора. Это отличает R от широко распространенных Си-подобных языков программирования (C, C++, C#, Java) и Python, в которых индексы элементов начинаются с 0 и заканчиваются N-1. Например, первый элемент списка (аналог вектора в R) на языке Python извлекался бы как colors[0]. За этим нужно внимательно следить, особенно если вы программируете на нескольких языках. Количество элементов (длину) вектора можно узнать с помощью функции length(): length(colors) ## [1] 5 Последний элемент вектора можно извлечь, если мы знаем его длину: n &lt;- length(colors) colors[n] ## [1] &quot;Оранжевая&quot; Последовательности удобно использовать для извлечения подвекторов. Предположим, нужно извлечь первые 4 элемента. Для этого запишем: lengths[1:4] ## [1] 28 40 45 19 Индексирующий вектор можно создать заранее. Это удобно, если номера могут меняться в программе: m &lt;- 1 n &lt;- 4 index &lt;- m:n lengths[index] ## [1] 28 40 45 19 Обратите внимание на то что по сути один вектор используется для извлечения элементов из другого вектора. Это означает, что мы можем использовать не только простые последовательности натуральных чисел, но и векторы из прозвольных индексов. Например: index &lt;- c(1, 3, 4) # хотим извлечь 1, 3 и 4 элемент списка lengths[index] ## [1] 28 45 19 index &lt;- c(5, 1, 4, 2) # индексы могут располагаться в произвольном порядке lengths[index] ## [1] 38 28 19 40 2.1.3 Анализ и преобразования векторов К числовым векторам можно применять множество функций. Прежде всего, нужно знать функции вычисления базовых параметров статистического ряда — минимум, максимум, среднее, медиана, дисперсия, размах вариации, среднеквадратическое отклонение, сумма: min(lengths) # минимум ## [1] 19 max(lengths) # максимум ## [1] 45 range(lengths) # размах вариации = максимум - минимум ## [1] 19 45 mean(lengths) # среднее арифметическое ## [1] 34 median(lengths) # медиана ## [1] 38 var(lengths) # дисперсия (по английски - вариация, variation) ## [1] 108.5 sd(lengths) # среднеквадратическое отклонение (standard deviation) ## [1] 10.41633 sum(lengths) # сумма ## [1] 170 Одной из мощнейших особенностей R является то что он не проводит различий между числами и векторами чисел. Поскольку R является матричным языком, каждое число представляется как вектор длиной 1 (или матрица \\(1х1\\)). Это означает, что любая математическая функция, применимая к числу, будет применима и к вектору: lengths * 1000 # преобразуем длины линий в метры ## [1] 28000 40000 45000 19000 38000 sqrt(lengths) # квадратный корень из длины каждого элемента ## [1] 5.291503 6.324555 6.708204 4.358899 6.164414 stations &lt;- c(20, 21, 22, 12, 24) # количество станций dens &lt;- stations / lengths # плотность станций по веткам метро = кол-во станций / длина dens ## [1] 0.7142857 0.5250000 0.4888889 0.6315789 0.6315789 2.1.4 Поиск и сортировка элементов К важнейшим преобразованиям векторов относится их сортировка: lengths2 &lt;- sort(lengths) # сортировка по возрастанию значений lengths2 # отсортированный вектор ## [1] 19 28 38 40 45 lengths # сравним с исходным ## [1] 28 40 45 19 38 lengths2 &lt;- sort(lengths, decreasing = TRUE) # сортировка по убыванию значений. Нужно задать параметр decreasing lengths2 # отсортированный вектор ## [1] 45 40 38 28 19 lengths # сравним с исходным ## [1] 28 40 45 19 38 Другая распространенная задача — это поиск индекса элемента по его значению. Например, вы хотите узнать, какая ветка Московского метро (среди рассматриваемых) является самой длинной. Вы, конечно, легко найдете ее длину с помощью функции max(lengths). Однако это не поможет вам узнать ее название, поскольку оно находится в другом векторе, и его индекс в массиве неизвестен. Поскольку векторы упорядочены одинаково, нам достаточно узнать, под каким индексом в массиве lengths располагается максимальный элемент, и затем извлечь цвет линии метро под тем же самым индексом. Дл поиска индекса элемента используется функция match(): l &lt;- max(lengths) # находим максимальное значение idx &lt;- match(l, lengths) # находим индекс элемента, равного l, в списке lengths color &lt;- colors[idx] # извлекаем цвет ветки метро color ## [1] &quot;Синяя&quot; Здесь непохо бы лишний раз потренироваться в конкатенации строк, чтобы вывести результат красиво! s &lt;- paste(color, &quot;ветка Московского метро — самая длинная. Ее протяженность составляет&quot;, l, &quot;км&quot;) s ## [1] &quot;Синяя ветка Московского метро — самая длинная. Ее протяженность составляет 45 км&quot; Ну и напоследок пример “матрешки”&quot; из функций — как найти название самой плотной линии одним выражением: colors[match(max(dens),dens)] ## [1] &quot;Красная&quot; 2.2 Матрицы Матрица — это обобщение понятия вектора на 2 измерения. С точки зрения анализа данных матрицы ближе к реальным данным, посколько каждая матрица по сути представляет собой таблицу со столбцами и строками. Однако матрица, как и вектор, может содержать только элементы одного типа (числовые, строковые, логические и т.д.). Позже мы познакомимся с фреймами данных, которые не обладают подобным ограничением. А пока рассмотрим, как работать с двумерными данными на примере матриц. Матрица, как правило, создается с помощью функции matrix, которая принимает 3 обязательных аргумента: вектор исходных значений, количество строк и количество столбцов: v &lt;- 1:12 # создадим вектор из натуральных чисел от 1 до 12 m &lt;- matrix(v, nrow = 3, ncol = 4) m ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 По умолчанию матрица заполняется данными вектора по столбцам, что можно видеть в выводе программы. Если вы хотите заполнить ее по строкам, необходимо указать параметр byrow = TRUE: m &lt;- matrix(v, nrow = 3, ncol = 4, byrow = TRUE) m ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 ## [3,] 9 10 11 12 Доступ к элементам матрицы осуществляется аналогично вектору, за исключением того что нужно указать положение ячейки в строке и столбце: m[2,4] # 2 строка, 4 толбец ## [1] 8 m[3,1] # 3 строка, 1 столбец ## [1] 9 Помимо этого, из матрицы можно легко извлечь одну строку или один столбец. Для этого достаточно указать только номер строки или столбца, а номер второго измерения пропустить до или после запятой. Результат является вектором: m[2,] # 2 строка ## [1] 5 6 7 8 m[,3] # 3 cтолбец ## [1] 3 7 11 К матрицам можно применять операции, аналогичные операциям над векторами: log(m) # натуральный логарифм ото всех элементов ## [,1] [,2] [,3] [,4] ## [1,] 0.000000 0.6931472 1.098612 1.386294 ## [2,] 1.609438 1.7917595 1.945910 2.079442 ## [3,] 2.197225 2.3025851 2.397895 2.484907 sum(m) # сумма всех элементов матрицы ## [1] 78 median(m) # медиана ## [1] 6.5 А вот сортировка матрицы приведет к тому что будет возвращен обычный вектор: sort(m) ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 К матрицам также применимы специальные функции, известные из линейной алгебры, такие как транспонирование и вычисление определителя: t(m) # транспонированная матрица ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 m2&lt;-matrix(-3:3,nrow = 3, ncol = 3) ## Warning in matrix(-3:3, nrow = 3, ncol = 3): длина данных [7] не является ## множителем количества строк [3] m2 ## [,1] [,2] [,3] ## [1,] -3 0 3 ## [2,] -2 1 -3 ## [3,] -1 2 -2 det(m2) # определитель матрицы ## [1] -21 det(m) # ошибка! определитель вычисляется только для квадратных матриц ## Error in determinant.matrix(x, logarithm = TRUE, ...): &#39;x&#39; должен быть квадратной матрицей Матрицы также можно перемножать с помощью специального оператора %*%. При этом, как мы помним, число столбцов в первой матрице должно равняться числу строк во второй: m2 %*% m ## [,1] [,2] [,3] [,4] ## [1,] 24 24 24 24 ## [2,] -24 -28 -32 -36 ## [3,] -9 -10 -11 -12 m %*% m2 # ошибка! ## Error in m %*% m2: неподобные аргументы Функция match(), которую мы использовали для поиска элементов в векторе, не работает для матриц. Вместо этого необходимо использовать функцию which(). Если мы хотим найти в матрице m позицию числа \\(8\\), то вызов функции будет выглядеть так: which(m == 8, arr.ind = TRUE) ## row col ## [1,] 2 4 В данном случае видно, что результат возвращен в виде матрицы \\(1 \\times 2\\). Обратите внимание на то, что колонки матрицы имеют названия. Попробуем использовать найденные индексы, чтобы извлечь искомый элемент: indexes &lt;- which(m == 8, arr.ind = TRUE) row &lt;- indexes[1,1] col &lt;- indexes[1,2] m[row,col] ## [1] 8 Ура! Найденный элемент действительно равен \\(8\\). Еще один полезный способ создания матрицы — это собрать ее из нескольких векторов, объединив их по строкам. Для этого можно использовать функции cbind() и rbind(). На предыдущем занятии мы создали векторы с длиной и количеством станций на разных ветках метро. Можно объединить их в одну матрицу: lengths &lt;- c(28, 40, 45, 19, 38) stations &lt;- c(20, 21, 22, 12, 24) cbind(lengths, stations) # соединим вектора в качестве столбцов ## lengths stations ## [1,] 28 20 ## [2,] 40 21 ## [3,] 45 22 ## [4,] 19 12 ## [5,] 38 24 rbind(lengths, stations) # соединим вектора в качестве строк ## [,1] [,2] [,3] [,4] [,5] ## lengths 28 40 45 19 38 ## stations 20 21 22 12 24 Cтроки и столбцы матрицы можно использовать как векторы при выполнении арифметических операций: mm &lt;- cbind(lengths, stations) mm[,2]/mm[,1] # количество станций на 1 км пути ## [1] 0.7142857 0.5250000 0.4888889 0.6315789 0.6315789 Результат можно присоединить к уже созданной матрице: dens &lt;- mm[,2]/mm[,1] mm&lt;-cbind(mm, dens) mm ## lengths stations dens ## [1,] 28 20 0.7142857 ## [2,] 40 21 0.5250000 ## [3,] 45 22 0.4888889 ## [4,] 19 12 0.6315789 ## [5,] 38 24 0.6315789 Содержимое матрицы можно просмотреть в более привычном табличном виде для этого откройте вкладку Environment и щелкните на строку с матрицей в разделе Data Матрицы, однако, не дотягивают по функциональности до представления таблиц, и, в общем-то, не предназначены для объединения разнородных данных в один набор (как мы это сделали). Если вы присоедините к матрице столбец с названиями веток метро, система не выдаст сообщение об ошибке, но преобразует матрицу в текстовую, так как текстовый тип данных способен представить любой другой тип данных: colors &lt;- c(&quot;Красная&quot;, &quot;Зеленая&quot;, &quot;Синяя&quot;, &quot;Коричневая&quot;, &quot;Оранжевая&quot;) mm2&lt;-cbind(mm,colors) mm2 # обратите внимание на то, что вокруг чисел добавились кавычки ## lengths stations dens colors ## [1,] &quot;28&quot; &quot;20&quot; &quot;0.714285714285714&quot; &quot;Красная&quot; ## [2,] &quot;40&quot; &quot;21&quot; &quot;0.525&quot; &quot;Зеленая&quot; ## [3,] &quot;45&quot; &quot;22&quot; &quot;0.488888888888889&quot; &quot;Синяя&quot; ## [4,] &quot;19&quot; &quot;12&quot; &quot;0.631578947368421&quot; &quot;Коричневая&quot; ## [5,] &quot;38&quot; &quot;24&quot; &quot;0.631578947368421&quot; &quot;Оранжевая&quot; При попытке выполнить арифметическое выражение над прежде числовыми полями, вы получите сообщение об ошибке: mm2[,2]/mm2[,1] ## Error in mm2[, 2]/mm2[, 1]: нечисловой аргумент для бинарного оператора 2.3 Массивы Массивы (arrays) — это многомерные структуры данных, с колчеством измерений 3 и более. Трехмерный массив представляет собой куб однородных данных. Массивы возникают тогда, например, когда имеются временные данные, зафиксированные в неких географических локациях. При этом 2 измерения отвечают за местоположение, а третье измерение — за временной срез. 2.4 Фреймы данных Фреймы данных — это обобщение понятия матрицы на данные смешанных типов. Фреймы данных - наиболее распространенный формат представления табличных данных. Для краткости мы иногда будем называть их просто фреймами. Мы специально не используем для перевода слова data.frame термин ‘таблица’, поскольку таблица — это достаточно общая категория, которая описывает концептуальный способ упорядочивания данных. В том же языке R для представления таблиц могут быть использованы как минимум две структуры данных: фрейм данных (data.frame) и тиббл (tibble), доступный в соответствующем пакете. Мы не будем использовать тибблы в настоящем курсе, но после его освоения вы вполне сможете ознакомиться с ними самостоятельною Для создания фреймов данных используется функция data.frame(): t&lt;-data.frame(colors,lengths,stations) t # как мы видим, уже никаких кавычек вокруг чисел ## colors lengths stations ## 1 Красная 28 20 ## 2 Зеленая 40 21 ## 3 Синяя 45 22 ## 4 Коричневая 19 12 ## 5 Оранжевая 38 24 К фреймам также можно пристыковывать новые столбцы: t&lt;-cbind(t, dens) t ## colors lengths stations dens ## 1 Красная 28 20 0.7142857 ## 2 Зеленая 40 21 0.5250000 ## 3 Синяя 45 22 0.4888889 ## 4 Коричневая 19 12 0.6315789 ## 5 Оранжевая 38 24 0.6315789 Когда фрейм данных формируется посредством функции data.frame() и cbind(), названия столбцов берутся из названий векторов. Обратите внимание на то, что листинге выше столбцы имеют заголовки, а строки — номера. Как и прежде, к столбцам и строкам можно обращаться по индексам: t[2,2] ## [1] 40 t[,3] ## [1] 20 21 22 12 24 t[4,] ## colors lengths stations dens ## 4 Коричневая 19 12 0.6315789 Вы можете обращаться к отдельным столбцам фрейма данных по их названию, используя оператор $ (доллар): t$lengths ## [1] 28 40 45 19 38 t$stations ## [1] 20 21 22 12 24 Так же как и ранее, можно выполнять различные операции над столбцами: max(t$stations) ## [1] 24 t$lengths / t$stations ## [1] 1.400000 1.904762 2.045455 1.583333 1.583333 Названия столбцов можно получить с помощью функции colnames() colnames(t) ## [1] &quot;colors&quot; &quot;lengths&quot; &quot;stations&quot; &quot;dens&quot; Чтобы присоединить строку, сначала можно создать фрейм данных из одной строки: row&lt;-data.frame(&quot;Фиолетовая&quot;, 40.5, 22, 22/45) Далее нужно убедиться, что столбцы в этом мини-фрейме называются также как и в той, куда мы хотим присоединить строку. Для этого нужно перезаписать результат, возвращаемый функцией colnames(): colnames(row) &lt;- colnames(t) Обратите внимание на синтаксис вышеприведенного выражения. Когда функция возвращает результат, она обнаруживает свойство самого объекта, и мы можем его перезаписать. После того как столбцы приведены в соответствие, можно присоединить новую строку: t&lt;-rbind(t,row) Поскольку названия столбцов хранятся как вектор из строк, мы можем их переделать: colnames(t)&lt;-c(&quot;Цвет&quot;,&quot;Длина&quot;,&quot;Станции&quot;,&quot;Плотность&quot;) colnames(t) ## [1] &quot;Цвет&quot; &quot;Длина&quot; &quot;Станции&quot; &quot;Плотность&quot; Обратимся по новому названию столбца: t$Длина ## [1] 28.0 40.0 45.0 19.0 38.0 40.5 t ## Цвет Длина Станции Плотность ## 1 Красная 28.0 20 0.7142857 ## 2 Зеленая 40.0 21 0.5250000 ## 3 Синяя 45.0 22 0.4888889 ## 4 Коричневая 19.0 12 0.6315789 ## 5 Оранжевая 38.0 24 0.6315789 ## 6 Фиолетовая 40.5 22 0.4888889 2.5 Списки Список — это наиболее общий тип контейнера в R. Список отличается от вектора тем, что он может содержать набор объектов произвольного типа. В качестве элементов списка могут быть числа, строки, вектора, матрицы, фреймы данных — и все это в одном контейнере. Списки используются чтобы комбинировать разрозненную информацию. Результатом выполнения многих функций является список. Например, можно создать список из текстового описания фрейма данных, самого фрейма данных и обобщающей статистики по нему: d &lt;- &quot;Этт фрейм данных содержит данные по 6 линиям Московского метро&quot; s &lt;- summary(t) # summary() выдает обобщающую статистику вектору, матрице или фрейму данных Сооружаем список из трех элементов: metrolist &lt;- list(d,t,s) metrolist ## [[1]] ## [1] &quot;Этт фрейм данных содержит данные по 6 линиям Московского метро&quot; ## ## [[2]] ## Цвет Длина Станции Плотность ## 1 Красная 28.0 20 0.7142857 ## 2 Зеленая 40.0 21 0.5250000 ## 3 Синяя 45.0 22 0.4888889 ## 4 Коричневая 19.0 12 0.6315789 ## 5 Оранжевая 38.0 24 0.6315789 ## 6 Фиолетовая 40.5 22 0.4888889 ## ## [[3]] ## Цвет Длина Станции Плотность ## Зеленая :1 Min. :19.00 Min. :12.00 Min. :0.4889 ## Коричневая:1 1st Qu.:30.50 1st Qu.:20.25 1st Qu.:0.4979 ## Красная :1 Median :39.00 Median :21.50 Median :0.5783 ## Оранжевая :1 Mean :35.08 Mean :20.17 Mean :0.5800 ## Синяя :1 3rd Qu.:40.38 3rd Qu.:22.00 3rd Qu.:0.6316 ## Фиолетовая:1 Max. :45.00 Max. :24.00 Max. :0.7143 Можно дать элементам списка осмысленные названия при создании: metrolist &lt;- list(desc = d, table = t, summary = s) metrolist ## $desc ## [1] &quot;Этт фрейм данных содержит данные по 6 линиям Московского метро&quot; ## ## $table ## Цвет Длина Станции Плотность ## 1 Красная 28.0 20 0.7142857 ## 2 Зеленая 40.0 21 0.5250000 ## 3 Синяя 45.0 22 0.4888889 ## 4 Коричневая 19.0 12 0.6315789 ## 5 Оранжевая 38.0 24 0.6315789 ## 6 Фиолетовая 40.5 22 0.4888889 ## ## $summary ## Цвет Длина Станции Плотность ## Зеленая :1 Min. :19.00 Min. :12.00 Min. :0.4889 ## Коричневая:1 1st Qu.:30.50 1st Qu.:20.25 1st Qu.:0.4979 ## Красная :1 Median :39.00 Median :21.50 Median :0.5783 ## Оранжевая :1 Mean :35.08 Mean :20.17 Mean :0.5800 ## Синяя :1 3rd Qu.:40.38 3rd Qu.:22.00 3rd Qu.:0.6316 ## Фиолетовая:1 Max. :45.00 Max. :24.00 Max. :0.7143 Теперь можно обратиться к элементу списка по его названию: metrolist$summary ## Цвет Длина Станции Плотность ## Зеленая :1 Min. :19.00 Min. :12.00 Min. :0.4889 ## Коричневая:1 1st Qu.:30.50 1st Qu.:20.25 1st Qu.:0.4979 ## Красная :1 Median :39.00 Median :21.50 Median :0.5783 ## Оранжевая :1 Mean :35.08 Mean :20.17 Mean :0.5800 ## Синяя :1 3rd Qu.:40.38 3rd Qu.:22.00 3rd Qu.:0.6316 ## Фиолетовая:1 Max. :45.00 Max. :24.00 Max. :0.7143 Поскольку summary сама является фреймом данных, из нее можно извлечь столбец: metrolist$summary[,3] ## ## &quot;Min. :12.00 &quot; &quot;1st Qu.:20.25 &quot; &quot;Median :21.50 &quot; &quot;Mean :20.17 &quot; ## ## &quot;3rd Qu.:22.00 &quot; &quot;Max. :24.00 &quot; К элементу списка можно также обратиться по его порядковому номеру или названию, заключив их в двойные квадратные скобки: metrolist[[1]] ## [1] &quot;Этт фрейм данных содержит данные по 6 линиям Московского метро&quot; metrolist[[&quot;desc&quot;]] ## [1] &quot;Этт фрейм данных содержит данные по 6 линиям Московского метро&quot; Использование двойных скобок отличает списки от векторов. 2.6 Факторы 2.7 Контрольные вопросы и задачи 2.7.1 Вопросы Что такое вектор в языке R? Какие способы создания векторов существуют? Можно ли хранить в векторе данные разных типов? Как определить длину вектора? Как извлечь из вектора элемент по его индексу? Как извлечь из вектора множество элементов по их индексам? Как извлечь из вектора последний элемент? С помощью какой функции можно сгенерировать последовательность чисел или дат с заданным шагом? Как сгенерировать последовательность целых чисел с шагом 1, не прибегая к функциям? Можно ли применять к векторам арифметические операторы? Что будет результатом их выполнения? С помощью какой функции можно отсортировать вектор? Как изменить порядок сортировки на противоположный? С помощью какой функции можно найти индекс элемента вектора по его значению? Что вернет функция, если этот элемент встречается в векторе несколько раз? Что такое матрица, массив, фрейм данных и список? Чем отличаются эти структуры данных? Какие из рассмотренных в этой главе структур данных могут содержать элементы разного типа, а какие только один? Какая функция позволяет создать матрицу? По строкам или по столбцам заполняется матрица при использовании вектора как источника данных по умолчанию? Как извлечь элемент по его индексам из матрицы, массива, фрейма данных, списка? Как извлечь строку или столбец из матрицы или фрейма данных? С помощью какого специального символа можно обратиться к столбцу фрейма данных по его названию? Как получить или записать названия столбцов фрейма данных? Как получить или записать названия строк фрейма данных? Какая структура данных является результатом сортировки матрицы? Какая функция позволяет осуществить транспонирование матрицы? Какой оператор используется для умножения матриц? Каким критериям должны отвечать перемножаемые матрицы, чтобы эта операция была осуществима? Как добавить новый столбец в фрейм данных? Опишите несколько вариантов. Как добавить новую строку в фрейм данных? Что произойдет, если к целочисленной матрице прибавить столбец, заполненный строками? Какая функция позволяет находить индексы элементов матрицы или фрейма данных по их значениям? 2.7.2 Задачи Самсонов Т.Е. Визуализация и анализ географических данных на языке R. М.: Географический факультет МГУ, 2017. DOI: 10.5281/zenodo.901911 "],
["tables.html", "Глава 3 Работа с таблицами 3.1 Чтение таблиц 3.2 Просмотр таблицы 3.3 Работа со столбцами 3.4 Сортировка и фильтрация 3.5 Пропущенные значения 3.6 Преобразование типов и поиск ошибок 3.7 Сохранение таблиц 3.8 Обработка таблиц в dplyr 3.9 Правила подготовки таблиц для чтения в R 3.10 Контрольные вопросы и задачи", " Глава 3 Работа с таблицами Программный код главы Необходимые пакеты: openxlsx, readxl, readr, xlsx, dplyr Таблица представляет собой один из способов структурирования данных. Большинство научных данных представляется именно в виде таблиц. В настоящем модуле рассмотрены базовые процедуры обработки таблиц, такие как чтение, сортировка, фильтрация, отбор столбцов (переменных), добавление и вычисление новых строк и столбцов, поиск и исправление ошибок в данных, запись таблиц в файл. Показано, как одни и те же процедуры могут быть реализованы стандартными средствами R и с помощью пакета dplyr. Напомним, что для представления таблиц в R используются фреймы данных. В рамках данной главы мы будем использовать оба понятия как взаимозаменяемые, предполагая, что речь идет о таблице, представленной в виде фрейма данных. 3.1 Чтение таблиц Существует множество файловых форматов представления табличных данных. Мы рассмотрим одни из наиболее распространенных — CSV и Microsoft Excel. 3.1.1 Таблицы CSV CSV (Comma-separated value) — общее название для формата представления таблиц в виде текстовых файлов, организованных по следующему принципу: Каждая строка в файле соответствует строке в таблице Ячейки отделяются друг от друга символом-разделителем. Если ячейка пустая, то между соседними разделителями не должно быть никаких символов. Стандартным разделителем ячеек является запятая (,), а десятичным разделителем — точка (.). Однако это не является строгим правилом. Например, вот так выглядит таблица в формате CSV, с которой мы дальше будем работать: Год;Всего;Балтийское;Черное;Азовское;Каспийское;Карское;Белое;Прочие 1993;27,2;2,5;0,4;4,3;12,1;5,3;1,0;1,6 1994;24,6;2,3;0,4;3,2;11,0;5,0;0,9;1,8 1995;24,5;2,3;0,4;3,5;10,4;5,2;0,9;1,8 1996;22,4;2,2;0,3;3,1;9,8;4,7;0,8;1,5 1997;23,0;2,2;0,3;3,8;9,8;4,4;0,8;1,7 Видно, что первая строка в файле занята заголовками столбцов. Формат CSV этот момент не обговаривает, поэтому при чтении таблицы нужно явным образом указывать, что данные начинаются со второй строки, а первую строку следует интерепретировать как заголовочную. Также следует отметить, что в данном файле в качестве символа-разделителя ячеек используется точка с запятой (;), поскольку в русской локали запятая (,) зарезервирована под десятичный разделитель. Разделитель ячеек и десятичный разделитель также должны быть указаны при открытии файла, если они не соответствуют стандартным. Таблицы в формате CSV (Comma-Separated Values) можно прочесть как с помощью стандартных средств языка R, так и с помощью пакета readr. Рассмотрим оба варианта. Для чтения таблиц с разделителем существует функция стандартной бибилиотеки read.table(). Ее основные параметры следующие: file — название файла sep — разделитель ячеек dec — десятичный разделитель header — содержится ли в первой строке заголовок — encoding — кодировка символов, в которой сохранен файл (чаще всего UTF-8 или CP1251) Стандартной кодировкой для представления текста в UNIX-подобных системах (Ubuntu, macOS и т.д.) является UTF-8 (Unicode), в русскоязычных версиях Windows — CP1251 (Windows-1251). Текстовый файл CSV, созданный в разных операционных системах, будет по умолчанию сохраняться в соответствующей кодировке, если вы не указали ее явным образом. Если при загрузке таблицы в R вы видите вместо текста нечитаемые символы — кракозябры — то, скорее всего, вы читаете файл не в той кодировке, в которой он был сохранен. Попробуйте поменять UTF-8 на CP1251 или наоборот. Если вы не знаете, что такое кодировка и Юникод, то вам сюда. Прочтем таблицу с данными Росстата по объему сброса сточных вод в бассейны некоторых морей России (в млн. м\\(^3\\)): # Чтение таблиц CSV tab &lt;- read.table(&quot;oxr_vod.csv&quot;, sep = &#39;;&#39;, dec = &#39;,&#39;, header = TRUE, encoding = &#39;UTF-8&#39;) str(tab) # Посмотрим на структуру таблицы ## &#39;data.frame&#39;: 22 obs. of 9 variables: ## $ Год : int 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 ... ## $ Всего : num 27.2 24.6 24.5 22.4 23 22 20.7 20.3 19.8 19.8 ... ## $ Балтийское: num 2.5 2.3 2.3 2.2 2.2 2.2 2.2 2.2 2.1 2 ... ## $ Черное : num 0.4 0.4 0.4 0.3 0.3 0.3 0.3 0.3 0.3 0.2 ... ## $ Азовское : num 4.3 3.2 3.5 3.1 3.8 3.2 2.5 2 1.9 2 ... ## $ Каспийское: num 12.1 11 10.4 9.8 9.8 9.5 9.1 9.2 8.9 9.2 ... ## $ Карское : num 5.3 5 5.2 4.7 4.4 4.2 4.1 4.2 4.2 4.1 ... ## $ Белое : num 1 0.9 0.9 0.8 0.8 0.8 0.8 0.9 0.9 0.8 ... ## $ Прочие : num 1.6 1.8 1.8 1.5 1.7 1.8 1.7 1.5 1.5 1.5 ... Существуют также специальные функции для чтения таблиц CSV: read.csv() и read.csv2(). По сути они являются “обертками” (wrappers) функции read.table() и выполняют ее вызов с автоматической подстановкой параметров sep, dec и header. Обе функции по умолчанию предполагают, что в файле имеется заголовок. read.csv() удобна для чтения таблиц с десятичной точкой и запятой-разделителем, а read.csv2() — для таблиц с десятичной запятой и точкой-с-запятой в качестве разделителя. Используем для чтения read.csv2(): tab &lt;- read.csv2(&quot;oxr_vod.csv&quot;, encoding = &#39;UTF-8&#39;) str(tab) # Посмотрим на структуру таблицы ## &#39;data.frame&#39;: 22 obs. of 9 variables: ## $ Год : int 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 ... ## $ Всего : num 27.2 24.6 24.5 22.4 23 22 20.7 20.3 19.8 19.8 ... ## $ Балтийское: num 2.5 2.3 2.3 2.2 2.2 2.2 2.2 2.2 2.1 2 ... ## $ Черное : num 0.4 0.4 0.4 0.3 0.3 0.3 0.3 0.3 0.3 0.2 ... ## $ Азовское : num 4.3 3.2 3.5 3.1 3.8 3.2 2.5 2 1.9 2 ... ## $ Каспийское: num 12.1 11 10.4 9.8 9.8 9.5 9.1 9.2 8.9 9.2 ... ## $ Карское : num 5.3 5 5.2 4.7 4.4 4.2 4.1 4.2 4.2 4.1 ... ## $ Белое : num 1 0.9 0.9 0.8 0.8 0.8 0.8 0.9 0.9 0.8 ... ## $ Прочие : num 1.6 1.8 1.8 1.5 1.7 1.8 1.7 1.5 1.5 1.5 ... Данная таблица не отличается от предыдущей, но ее чтение с помощью функции read.csv2() более компактно. Помимо стандартной библиотеки вы можете читать таблицы CSV (и другие текстовые форматы) с помощью пакета readr. Одним из его преимуществ является то, что он читает таблицы примерно в 10 раз быстрее стандартной библиотеки. Аналогично стандартной библиотеки можно воспользоваться функцией read_csv2(). Отличие заключается только в том, что данная функция возвращает объект типа tibble, который является расширением фрейма данных. Если рабочий процесс предполагает использование фреймов данных, небходимо преобразовать результат к данному типу: library(readr) tab &lt;- as.data.frame(read_csv2(&quot;oxr_vod.csv&quot;)) str(tab) # Посмотрим на структуру таблицы ## &#39;data.frame&#39;: 22 obs. of 9 variables: ## $ Год : int 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 ... ## $ Всего : num 27.2 24.6 24.5 22.4 23 22 20.7 20.3 19.8 19.8 ... ## $ Балтийское: num 2.5 2.3 2.3 2.2 2.2 2.2 2.2 2.2 2.1 2 ... ## $ Черное : num 0.4 0.4 0.4 0.3 0.3 0.3 0.3 0.3 0.3 0.2 ... ## $ Азовское : num 4.3 3.2 3.5 3.1 3.8 3.2 2.5 2 1.9 2 ... ## $ Каспийское: num 12.1 11 10.4 9.8 9.8 9.5 9.1 9.2 8.9 9.2 ... ## $ Карское : num 5.3 5 5.2 4.7 4.4 4.2 4.1 4.2 4.2 4.1 ... ## $ Белое : num 1 0.9 0.9 0.8 0.8 0.8 0.8 0.9 0.9 0.8 ... ## $ Прочие : num 1.6 1.8 1.8 1.5 1.7 1.8 1.7 1.5 1.5 1.5 ... ## - attr(*, &quot;spec&quot;)=List of 2 ## ..$ cols :List of 9 ## .. ..$ Год : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ Всего : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Балтийское: list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Черное : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Азовское : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Каспийское: list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Карское : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Белое : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ Прочие : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## ..$ default: list() ## .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_guess&quot; &quot;collector&quot; ## ..- attr(*, &quot;class&quot;)= chr &quot;col_spec&quot; 3.1.2 Таблицы Microsoft Excel Чтение таблиц Microsoft Excel не входит в возможности стандартной библиотеки R. В то же время, для этих целей существует ряд пакетов, таких как xlsx, openxlsx и readxl. Пакет xlsx требует наличия установленной среды Java на компьютере, что несколько усложняет его использование. В нашей работе мы будем пользоваться пакетами openxlsx и readxl. Для чтения таблицы пакетом openxlsx воспользуемся функцией read.xlsx(). В качестве обязательных параметров она принимает следующие аргументы: xlsxFile — название файла sheet — номер листа Откроем таблицу с данными Росстата по сбросу загрязненных сточных вод в поверхностные водные объекты (млн м\\(^3\\)). # Чтение таблиц EXCEL library(openxlsx) # Подключаем библиотеку sewage &lt;- read.xlsx(&quot;sewage.xlsx&quot;, 1) # Читаем таблицу из первого листа str(sewage) # Посмотрим на структуру таблицы ## &#39;data.frame&#39;: 97 obs. of 6 variables: ## $ X1 : chr &quot;Российская Федерация&quot; &quot;Центральный федеральный округ &quot; &quot;Белгородская область&quot; &quot;Брянская область&quot; ... ## $ 2005: num 17727 4341 11 89 155 ... ## $ 2010: num 16516 3761 77 78 129 ... ## $ 2011: num 15966 3613 72 75 126 ... ## $ 2012: num 15678 3651 71 71 124 ... ## $ 2013: num 15189 3570 71 68 120 ... Аналогичный порядок действий будет и с пакетом readxl, за тем исключением, что данная функция возвращает объект типа tibble, который является расширением фрейма данных. Если рабочий процесс предполагает использование фреймов данных, небходимо преобразовать результат к данному типу: library(readxl) sewage &lt;- as.data.frame(read_excel(&quot;sewage.xlsx&quot;, 1)) str(sewage) ## &#39;data.frame&#39;: 97 obs. of 6 variables: ## $ X__1: chr &quot;Российская Федерация&quot; &quot;Центральный федеральный округ&quot; &quot;Белгородская область&quot; &quot;Брянская область&quot; ... ## $ 2005: num 17727 4341 11 89 155 ... ## $ 2010: num 16516 3761 77 78 129 ... ## $ 2011: num 15966 3613 72 75 126 ... ## $ 2012: num 15678 3651 71 71 124 ... ## $ 2013: num 15189 3570 71 68 120 ... 3.1.3 Типы данных столбцов Особого внимания при чтении таблиц заслуживает тема управления типами данных столбцов. В процессе чтения таблицы R будет пытаться привести каждый столбец к одному из базовых типов, рассмотренных в первой главе. Как правило, столбцы приводятся либо к числовому (numeric), либо к текстовому (character) типу. В то же время, в таблицах часто бывают пропущенные значения (нет данных), которые выражаются в виде пустых ячеек или специальных символов (например, -). Также могут быть опечатки и неверно заданные разделители десятичного разряда (например, запятая вместо точки). В этом контексте при чтении таблиц действуют следующие правила: По умолчанию типы данных столбцов определяются автоматически, если не задано иное. По умолчанию текстовые столбцы преобразуются функциями стандартной библиотки в факторы, а функциями из пакетов readr, openxlsx и readxl — остаются текстовыми столбцами. Если типы данных определяются автоматически, и в процессе чтения в текущем столбце обнаруживается хотя бы один нечисловой символ, столбец будет автоматически преобразован к текстовому типу. Если тип данных столбца задан пользователем как числовой, и в процессе чтения в нем обнаруживается хотя бы один нечисловой символ, импорт таблицы будет прерван и вы получите сообщение об ошибке. Управлять типами данных в фрейме данных гораздо проще на стадии чтения таблицы, чем уже после того, как она прочитана неправильно (см. раздел исправление ошибок в конце настоящей главы). Отсюда вытекают следующие рекомендации при чтении таблиц: Если вы пользуетесь стандартной библиотекой для чтения таблиц с текстовыми столбцами, запретите интерпретировать их как факторы, если это нежелательное поведение. Если вам известна структура таблицы, и вы не уверены в полноте и корректности ее наполнения, определите сразу при ее чтении типы столбцов, так вы поймете, все ли в порядке с данными. В качестве примера неправильно прочитанной таблицы приведем данные о типах землепользования на Сатинском учебном полигоне географического факультета МГУ: # ТИПЫ ДАННЫХ СТОЛБЦОВ tab2 &lt;- read.csv2(&quot;SatinoLanduse.csv&quot;, dec = &#39;.&#39;) str(tab2) # посмотрим, какова структура данных ## &#39;data.frame&#39;: 160 obs. of 6 variables: ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Type : Factor w/ 12 levels &quot;Выгоны&quot;,&quot;Вырубки&quot;,..: 11 1 1 9 5 1 5 12 9 10 ... ## $ Administration: Factor w/ 7 levels &quot;&quot;,&quot;РФ&quot;,&quot;Совьяковская администрация&quot;,..: 5 5 5 1 1 5 1 5 5 6 ... ## $ Comment : Factor w/ 35 levels &quot;&quot;,&quot;АО \\&quot;Родина\\&quot;&quot;,..: 30 1 1 1 1 1 1 3 2 1 ... ## $ Perimeter : num 2396 922 2181 3948 279 ... ## $ Area : Factor w/ 160 levels &quot;0.238070145845919&quot;,..: 73 49 121 100 63 72 88 128 99 24 ... Видно, что правильно прочитаны только три столбца: ID, хранящий идентификаторы, Type, хранящий тип землепользования, являющийся номинальной переменной, а также Perimeter, хранящий периметр участка. Текстовые столбцы Administration и Comment были также преобразованы в факторы, поскольку это стандартное поведение базовых функций R, хотя номинальными переменными по сути не являются. А последний столбец с площадью и вовсе не был прочитан правильно, так как содержит опечатки. Запретить интерепретировать строки как факторы можно с помощью параметра stringsAsFactors=FALSE: tab2 &lt;- read.csv2(&quot;SatinoLanduse.csv&quot;, dec = &#39;.&#39;, stringsAsFactors = FALSE) str(tab2) # посмотрим, какова структура данных ## &#39;data.frame&#39;: 160 obs. of 6 variables: ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Type : chr &quot;Территории населенных пунктов&quot; &quot;Выгоны&quot; &quot;Выгоны&quot; &quot;Пашни&quot; ... ## $ Administration: chr &quot;Совьяковская сельская администрация&quot; &quot;Совьяковская сельская администрация&quot; &quot;Совьяковская сельская администрация&quot; &quot;&quot; ... ## $ Comment : chr &quot;Село Беницы&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ Perimeter : num 2396 922 2181 3948 279 ... ## $ Area : chr &quot;286159.158855028570000&quot; &quot;21651.963989321295000&quot; &quot;56826.463220403260000&quot; &quot;450293.758854912190000&quot; ... Функции из пакета readr делают это по умолчанию: tab2 &lt;- as.data.frame(read_csv2(&quot;SatinoLanduse.csv&quot;)) str(tab2) # посмотрим, какова структура данных ## &#39;data.frame&#39;: 160 obs. of 6 variables: ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Type : chr &quot;Территории населенных пунктов&quot; &quot;Выгоны&quot; &quot;Выгоны&quot; &quot;Пашни&quot; ... ## $ Administration: chr &quot;Совьяковская сельская администрация&quot; &quot;Совьяковская сельская администрация&quot; &quot;Совьяковская сельская администрация&quot; NA ... ## $ Comment : chr &quot;Село Беницы&quot; NA NA NA ... ## $ Perimeter : num 2.40e+18 9.22e+17 2.18e+18 3.95e+18 2.79e+17 ... ## $ Area : chr &quot;286159.158855028570000&quot; &quot;21651.963989321295000&quot; &quot;56826.463220403260000&quot; &quot;450293.758854912190000&quot; ... ## - attr(*, &quot;spec&quot;)=List of 2 ## ..$ cols :List of 6 ## .. ..$ ID : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ Type : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Administration: list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Comment : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ Perimeter : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_number&quot; &quot;collector&quot; ## .. ..$ Area : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## ..$ default: list() ## .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_guess&quot; &quot;collector&quot; ## ..- attr(*, &quot;class&quot;)= chr &quot;col_spec&quot; Надежны надежный способ убедиться, что все данные прочитаны с нужным типом — определить типы данных в столбцах. Для функций базовой библиотеки R названия типов совпадают с названиями стандартных типов данных. Необходимо сформировать вектор из названий типов (по количеству столбцов) и передать его в качестве параметра colClasses: classes &lt;- c(&quot;integer&quot;, &quot;character&quot;, &quot;character&quot;, &quot;character&quot;, &quot;numeric&quot;, &quot;numeric&quot;) tab2 &lt;- read.csv2(&quot;SatinoLanduse.csv&quot;, dec = &#39;.&#39;, stringsAsFactors = FALSE, colClasses = classes) ## Error in scan(file = file, what = what, sep = sep, quote = quote, dec = dec, : &#39;scan()&#39; ожидает &#39;a real&#39;, а не &#39;89499,573298880117000&#39; В данном случае последний столбец вызывает ошибку, что говорит о том, что содержищиеся в нем данные надо исправлять (см. параграф “Исправление ошибок” в конце главы). 3.2 Просмотр таблицы Для просмотра фрейма данных в консоли RStudio вы можете использовать несколько опций. Пусть наш фрейм данных называется tab. Тогда: print(tab) — выводит фрейм в консоль целиком (можно написать просто tab в консоли). head(tab, n) — отбирает первые \\(n\\) строк фрейма tail(tab, n) — отбирает последние \\(n\\) строк фрейма По умолчанию для функций head() и tail() \\(n=6\\). Обычно этот параметр опускают, поскольку нужно просмотреть только первые несколько строк и шести вполне достаточно. Если вы напечатаете в консоли head(tab) или tail(tab), то для выбранных строк будет вызвана функция print(), аналогично выводу всего фрейма: # ПРОСМОТР ТАБЛИЦЫ print(tab) ## Год Всего Балтийское Черное Азовское Каспийское Карское Белое Прочие ## 1 1993 27.2 2.5 0.4 4.3 12.1 5.3 1.0 1.6 ## 2 1994 24.6 2.3 0.4 3.2 11.0 5.0 0.9 1.8 ## 3 1995 24.5 2.3 0.4 3.5 10.4 5.2 0.9 1.8 ## 4 1996 22.4 2.2 0.3 3.1 9.8 4.7 0.8 1.5 ## 5 1997 23.0 2.2 0.3 3.8 9.8 4.4 0.8 1.7 ## 6 1998 22.0 2.2 0.3 3.2 9.5 4.2 0.8 1.8 ## 7 1999 20.7 2.2 0.3 2.5 9.1 4.1 0.8 1.7 ## 8 2000 20.3 2.2 0.3 2.0 9.2 4.2 0.9 1.5 ## 9 2001 19.8 2.1 0.3 1.9 8.9 4.2 0.9 1.5 ## 10 2002 19.8 2.0 0.2 2.0 9.2 4.1 0.8 1.5 ## 11 2003 19.0 2.0 0.2 2.1 8.4 4.0 0.8 1.5 ## 12 2004 18.5 2.0 0.2 2.1 8.3 3.8 0.8 1.3 ## 13 2005 17.7 2.0 0.2 1.6 8.0 3.8 0.8 1.3 ## 14 2006 17.5 1.9 0.2 1.7 7.8 3.8 0.8 1.3 ## 15 2007 17.2 1.9 0.2 1.7 7.4 3.8 0.8 1.4 ## 16 2008 17.1 1.9 0.2 1.6 7.5 3.9 0.8 1.2 ## 17 2009 15.9 1.8 0.2 1.5 6.8 3.5 0.7 1.4 ## 18 2010 16.5 2.0 0.2 1.6 7.3 3.3 0.7 1.4 ## 19 2011 16.0 1.9 0.2 1.6 7.1 3.2 0.7 1.3 ## 20 2012 15.7 1.8 0.2 1.6 7.0 3.0 0.7 1.4 ## 21 2013 15.2 1.8 0.2 1.6 6.9 3.0 0.6 1.1 ## 22 2014 14.8 1.7 0.2 1.5 6.4 3.2 0.6 1.2 head(tab) ## Год Всего Балтийское Черное Азовское Каспийское Карское Белое Прочие ## 1 1993 27.2 2.5 0.4 4.3 12.1 5.3 1.0 1.6 ## 2 1994 24.6 2.3 0.4 3.2 11.0 5.0 0.9 1.8 ## 3 1995 24.5 2.3 0.4 3.5 10.4 5.2 0.9 1.8 ## 4 1996 22.4 2.2 0.3 3.1 9.8 4.7 0.8 1.5 ## 5 1997 23.0 2.2 0.3 3.8 9.8 4.4 0.8 1.7 ## 6 1998 22.0 2.2 0.3 3.2 9.5 4.2 0.8 1.8 tail(tab) ## Год Всего Балтийское Черное Азовское Каспийское Карское Белое Прочие ## 17 2009 15.9 1.8 0.2 1.5 6.8 3.5 0.7 1.4 ## 18 2010 16.5 2.0 0.2 1.6 7.3 3.3 0.7 1.4 ## 19 2011 16.0 1.9 0.2 1.6 7.1 3.2 0.7 1.3 ## 20 2012 15.7 1.8 0.2 1.6 7.0 3.0 0.7 1.4 ## 21 2013 15.2 1.8 0.2 1.6 6.9 3.0 0.6 1.1 ## 22 2014 14.8 1.7 0.2 1.5 6.4 3.2 0.6 1.2 RStudio, разумеется, имеет “человеческий” интерфейс для просмотра таблиц, в котором таблицу можно сортировать и фильтровать. Чтобы его активировать, надо вызвать функцию View(): View(tab) Поскольку функции head() и tail() возвращают строки с хвоста или начала фрейма данных, их можно и подать на вход функции View(): View(head(sewage, 3)) Как правило, не следует оставлять вызовы функции View() в тексте законченной программы. Это приведет к тому, что при запуске будут открываться новые вкладки с просмотром таблиц, что может раздражать пользователя (в том числе и вас самих). Используйте View() для вывода окончательного результата в конце программы или при отладке программы. Все вызовы View() в программе можно легко закомментировать или раскомментировать, выполнив поиск с заменой 'View(' на '# View(' и наоборот. 3.3 Работа со столбцами 3.3.1 Названия столбцов Для просмотра и изменения названий столбцов фрейма данных следует использовать функцию colnames(): # РАБОТА СО СТОЛБЦАМИ # Просмотрим текущие названия colnames(sewage) ## [1] &quot;X__1&quot; &quot;2005&quot; &quot;2010&quot; &quot;2011&quot; &quot;2012&quot; &quot;2013&quot; colnames(tab) ## [1] &quot;Год&quot; &quot;Всего&quot; &quot;Балтийское&quot; &quot;Черное&quot; &quot;Азовское&quot; ## [6] &quot;Каспийское&quot; &quot;Карское&quot; &quot;Белое&quot; &quot;Прочие&quot; # Заменим их на новые colnames(sewage) &lt;- c(&quot;Region&quot;, &quot;Year05&quot;, &quot;Year10&quot;, &quot;Year11&quot;, &quot;Year12&quot;, &quot;Year13&quot;) colnames(tab) &lt;- c(&quot;Year&quot;, &quot;Total&quot;, &quot;Baltic&quot;, &quot;Black&quot;, &quot;Azov&quot;, &quot;Caspian&quot;, &quot;Kara&quot;, &quot;White&quot;, &quot;Other&quot;) # Проверим результат colnames(sewage) ## [1] &quot;Region&quot; &quot;Year05&quot; &quot;Year10&quot; &quot;Year11&quot; &quot;Year12&quot; &quot;Year13&quot; colnames(tab) ## [1] &quot;Year&quot; &quot;Total&quot; &quot;Baltic&quot; &quot;Black&quot; &quot;Azov&quot; &quot;Caspian&quot; &quot;Kara&quot; ## [8] &quot;White&quot; &quot;Other&quot; 3.3.2 Обращение к столбцам К столбцу можно обращаться по номеру и названию (с помощью оператора $ или в кавычках внутри скобок). Если вы указываете в квадратных скобках номер без запятой, он трактуется именно как номер столбца, а не строки. Тип возвращаемого значения зависит от синтаксиса: обращение через $ возвращает вектор; обращение в скобках с запятой к одному столбцу возвращает вектор; обращение в скобках с запятой к нескольким столбцам возвращает фрейм данных; обращение в скобках без запятой возвращает фрейм данных. Несколько примеров: a &lt;- head(sewage) # Один столбец - результат зависит от запятой a$Year05 # столбец в виде вектора ## [1] 17727 4341 11 89 155 169 a[, &quot;Year05&quot;] # столбец в виде вектора ## [1] 17727 4341 11 89 155 169 a[, 2] # столбец в виде вектора ## [1] 17727 4341 11 89 155 169 a[&quot;Year05&quot;] # столбец в виде фрейма данных ## Year05 ## 1 17727 ## 2 4341 ## 3 11 ## 4 89 ## 5 155 ## 6 169 a[2] # столбец в виде фрейма данных ## Year05 ## 1 17727 ## 2 4341 ## 3 11 ## 4 89 ## 5 155 ## 6 169 # Несколько столбцов - всегда фрейм данных a[, c(1, 4)] # столбцы в виде фрейма данных ## Region Year11 ## 1 Российская Федерация 15966 ## 2 Центральный федеральный округ 3613 ## 3 Белгородская область 72 ## 4 Брянская область 75 ## 5 Владимирская область 126 ## 6 Воронежская область 135 a[, c(&quot;Region&quot;, &quot;Year11&quot;)]# столбцы в виде фрейма данных ## Region Year11 ## 1 Российская Федерация 15966 ## 2 Центральный федеральный округ 3613 ## 3 Белгородская область 72 ## 4 Брянская область 75 ## 5 Владимирская область 126 ## 6 Воронежская область 135 a[c(&quot;Region&quot;, &quot;Year11&quot;)] # столбцы в виде фрейма данных ## Region Year11 ## 1 Российская Федерация 15966 ## 2 Центральный федеральный округ 3613 ## 3 Белгородская область 72 ## 4 Брянская область 75 ## 5 Владимирская область 126 ## 6 Воронежская область 135 a[c(1, 4)] # столбцы в виде фрейма данных ## Region Year11 ## 1 Российская Федерация 15966 ## 2 Центральный федеральный округ 3613 ## 3 Белгородская область 72 ## 4 Брянская область 75 ## 5 Владимирская область 126 ## 6 Воронежская область 135 Использование необходимой формы зависит от контекста и ваших целей. 3.3.3 Выбор и исключение столбцов Можно создать новую таблицу, выбрав необходимые столбцы, как это показано выше: # Создадим новый фрейм данных из трех необходимых столбцов: caspian &lt;- tab[c(&quot;Year&quot;, &quot;Total&quot;, &quot;Caspian&quot;)] str(caspian) ## &#39;data.frame&#39;: 22 obs. of 3 variables: ## $ Year : int 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 ... ## $ Total : num 27.2 24.6 24.5 22.4 23 22 20.7 20.3 19.8 19.8 ... ## $ Caspian: num 12.1 11 10.4 9.8 9.8 9.5 9.1 9.2 8.9 9.2 ... Иногда проще создать новый фрейм данных, исключив из оригинала ненужные столбцы. Исключение делается с помощью знака ‘-’, который ставится перед номером столбца. Например, вот так можно исключить из таблицы tab столбцы Total (2-й) и Other (9-й): cleaned &lt;- tab[c(-2, -9)] str(cleaned) ## &#39;data.frame&#39;: 22 obs. of 7 variables: ## $ Year : int 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 ... ## $ Baltic : num 2.5 2.3 2.3 2.2 2.2 2.2 2.2 2.2 2.1 2 ... ## $ Black : num 0.4 0.4 0.4 0.3 0.3 0.3 0.3 0.3 0.3 0.2 ... ## $ Azov : num 4.3 3.2 3.5 3.1 3.8 3.2 2.5 2 1.9 2 ... ## $ Caspian: num 12.1 11 10.4 9.8 9.8 9.5 9.1 9.2 8.9 9.2 ... ## $ Kara : num 5.3 5 5.2 4.7 4.4 4.2 4.1 4.2 4.2 4.1 ... ## $ White : num 1 0.9 0.9 0.8 0.8 0.8 0.8 0.9 0.9 0.8 ... Есть также способ удалить столбец целиком (им пользуются довольно редко). Для этого необходимо записать в него значение NULL: cleaned$Azov &lt;- NULL str(cleaned) ## &#39;data.frame&#39;: 22 obs. of 6 variables: ## $ Year : int 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 ... ## $ Baltic : num 2.5 2.3 2.3 2.2 2.2 2.2 2.2 2.2 2.1 2 ... ## $ Black : num 0.4 0.4 0.4 0.3 0.3 0.3 0.3 0.3 0.3 0.2 ... ## $ Caspian: num 12.1 11 10.4 9.8 9.8 9.5 9.1 9.2 8.9 9.2 ... ## $ Kara : num 5.3 5 5.2 4.7 4.4 4.2 4.1 4.2 4.2 4.1 ... ## $ White : num 1 0.9 0.9 0.8 0.8 0.8 0.8 0.9 0.9 0.8 ... 3.3.4 Добавление и вычисление столбцов {col_add} Существует простой способ создать новый столбец в таблице — достаточно указать его название после значка $. Если среда R не обнаруживает столбец с таким названием, она его создаст: caspian$CaspianRatio &lt;- round(caspian$Caspian / caspian$Total, 3) View(caspian) Тем не менее, такой метод добавления столбцов нельзя считать правильным. Главный его недостаток — из формы записи неочевидно, что мы добавляем новый столбец, а не перевычисляем уже существующий. Пакет dplyr, который мы рассмотрим в конце настоящей главы, решает эту и многие другие стилистические проблемы работы с фреймами данных. Помимо того что вы можете вычислять столбцы традиционным способом как функцию от других столбцов, есть удобные функции-агрегаторы, позволяющие сделать вычисления по всем столбцам. Это rowSums() (сумма всех столбцов в строке) и rowMeans() (среднее по всем столбцам в строке). На тот случай, когда в ячейках есть пропущенные значения, в функциях предусмотрен параметр na.rm = TRUE. years &lt;- sewage[c(-1, -2)] # оставим данные с 2010 по 2013 гг colSums(years) # сколько всего было сброшено в каждом регионе за эти года ## Year10 Year11 Year12 Year13 ## NA NA NA NA rowMeans(years) # сколько было сброшено в среднем за каждый год ## [1] 15837.250 3648.750 72.750 73.000 124.750 132.250 96.500 ## [8] 89.250 45.250 37.000 84.000 1234.500 52.750 86.000 ## [15] 67.500 25.800 93.000 188.750 224.750 922.000 2906.750 ## [22] 190.500 118.000 374.000 NA 0.175 373.750 152.750 ## [29] 96.000 260.000 345.750 87.250 44.000 1239.250 1399.250 ## [36] 27.750 27.250 878.500 62.000 155.250 248.500 389.000 ## [43] 77.750 3.825 31.000 47.000 93.250 0.000 2860.750 ## [50] 319.500 55.750 40.500 483.750 115.250 29.250 381.750 ## [57] 180.250 477.250 125.250 106.000 376.250 59.500 110.250 ## [64] 1745.750 44.750 733.000 184.000 NA 53.250 35.500 ## [71] 95.250 784.500 2094.500 0.275 29.000 8.375 34.500 ## [78] 10.775 73.500 427.250 582.250 632.750 107.250 166.000 ## [85] 22.750 792.250 82.500 36.250 327.500 183.250 79.000 ## [92] 21.500 42.250 15.000 4.975 NA NA Существуют также аналогичные им функции colSums() и colMeans(), осуществляющие агрегирование данных по столбцам, а не по строкам. Перечисленные функции являются укороченной версией универсальных функций семейства apply, с которыми мы познакомимся далее. 3.4 Сортировка и фильтрация 3.4.1 Сортировка Распространенные операции с таблицами — это упорядочение по определенному столбцу и фильтрация по значениям. Мы уже знаем что из вектора, матрицы или таблицы можно извлекать элементы: tab[V, ], где tab — имя таблицы, V — это вектор из номеров элементов. Например, извлечь 5, 2 и 4 строку таблицы можно так: tab[c(5,2,4), ] ## Year Total Baltic Black Azov Caspian Kara White Other ## 5 1997 23.0 2.2 0.3 3.8 9.8 4.4 0.8 1.7 ## 2 1994 24.6 2.3 0.4 3.2 11.0 5.0 0.9 1.8 ## 4 1996 22.4 2.2 0.3 3.1 9.8 4.7 0.8 1.5 Логично предположить, что таким же образом можно извлечь элементы таблицы в порядке, обеспечивающем возрастание или убывание значений в каком-то столбце. Для этого нужно правильным образом расставить индексы в векторе c(...). Существует специальная функция order(), которая позволяет это сделать. Например, отсортируем таблицу по возрастанию сбросов в Каспийское море: indexes&lt;-order(tab$Caspian) head(tab[indexes, ]) ## Year Total Baltic Black Azov Caspian Kara White Other ## 22 2014 14.8 1.7 0.2 1.5 6.4 3.2 0.6 1.2 ## 17 2009 15.9 1.8 0.2 1.5 6.8 3.5 0.7 1.4 ## 21 2013 15.2 1.8 0.2 1.6 6.9 3.0 0.6 1.1 ## 20 2012 15.7 1.8 0.2 1.6 7.0 3.0 0.7 1.4 ## 19 2011 16.0 1.9 0.2 1.6 7.1 3.2 0.7 1.3 ## 18 2010 16.5 2.0 0.2 1.6 7.3 3.3 0.7 1.4 Если упорядочение несложное, программист его скорее всего вставит непосредственно в инструкцию обращения к таблице: head(tab[order(tab$Caspian), ]) ## Year Total Baltic Black Azov Caspian Kara White Other ## 22 2014 14.8 1.7 0.2 1.5 6.4 3.2 0.6 1.2 ## 17 2009 15.9 1.8 0.2 1.5 6.8 3.5 0.7 1.4 ## 21 2013 15.2 1.8 0.2 1.6 6.9 3.0 0.6 1.1 ## 20 2012 15.7 1.8 0.2 1.6 7.0 3.0 0.7 1.4 ## 19 2011 16.0 1.9 0.2 1.6 7.1 3.2 0.7 1.3 ## 18 2010 16.5 2.0 0.2 1.6 7.3 3.3 0.7 1.4 3.4.2 Фильтрация Схожим образом реализована фильтрация данных по значению. Например, вы хотите извлечь из таблицы только те года, в которых объем сбросов в Каспийское море составил более 10 млн м\\(^3\\). Здесь используется еще одна возможность извлечения элементов таблицы — с помощью вектора логических значений TRUE/FALSE. Число элементов в этом векторе должно быть равно числу элементов в индексируемом векторе, а значение указывает на то, нужно ли извлекать (TRUE) или нет (FALSE) элемент с текущим индексом. Вектор логических значений получается естественным путем с помощью операции сравнения: # ФИЛЬТРАЦИЯ condition &lt;- tab$Caspian &gt; 10 condition # посмотрим что получилось ## [1] TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [12] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE tab[condition, ] # используем его для фильтрации строк таблицы: ## Year Total Baltic Black Azov Caspian Kara White Other ## 1 1993 27.2 2.5 0.4 4.3 12.1 5.3 1.0 1.6 ## 2 1994 24.6 2.3 0.4 3.2 11.0 5.0 0.9 1.8 ## 3 1995 24.5 2.3 0.4 3.5 10.4 5.2 0.9 1.8 Опять же, весьма часто используется запись одним выражением: tab[tab$Caspian &gt; 10, ] ## Year Total Baltic Black Azov Caspian Kara White Other ## 1 1993 27.2 2.5 0.4 4.3 12.1 5.3 1.0 1.6 ## 2 1994 24.6 2.3 0.4 3.2 11.0 5.0 0.9 1.8 ## 3 1995 24.5 2.3 0.4 3.5 10.4 5.2 0.9 1.8 Часто бывает необходимо отобрать данные из таблицы, содержащей разнородные данные. В частности, в нашей таблице смешаны данные по субъектам и федеральным округам. Предположим, необходимо выгрузить в отдельную таблицу данные по федеральным округам. Для этого нужно найти строки, в которых столбец Region содержит фразу &quot;федеральный округ&quot;. Для поиска по текстовым эталонам импользуется функция grep(), выдающая номера элементов, или ее разновидность grepl(), выдающая список логических констант # Первый параметр - искомое выражение, второй параметр - где искть rows &lt;- grep(&quot;федеральный округ&quot;,sewage$Region) rows # посмотрим, какие элементы столбца Region ему соответствуют ## [1] 2 21 35 42 49 64 73 86 okruga &lt;- sewage[rows,] # отфильтруем найденные строки View(okruga) Наоборот — для исключения найденных объектов удобнее воспользоваться разновидностью grepl(), которая возвращает вектор из логических значений: rows2 &lt;- grepl(&quot;федеральный округ&quot;, sewage$Region) rows2 # вот так выглядит результат greplneokruga &lt;- sewage[!rows2, ] View(neokruga) Обратите внимание на восклицательный знак перед rows2. Он меняет все значения TRUE на FALSE и наоборот, что позволяет исключить найденные объекты В полученной таблице все еще содержится текстовая шелуха типа &quot;в том числе&quot;, &quot;Данные за...&quot;, а также строка &quot;Российская Федерация&quot;. К счастью, функция grep() достаточо умна и возволяет искать сразу по нескольким образцам строк. Для этого их нужно разделить вертикальной чертой — пайпом (|): rows2 &lt;- grepl(&quot;федеральный|числе|Российская|за|ѕ&quot;, sewage$Region) rowsneokruga &lt;- sewage[!rows2, ] # обратите внимание на восклицательный знак перед rows2 View(neokruga) 3.5 Пропущенные значения Можно ли осуществлять обработку таблицы sewage? Попробуем в качестве примера найти минимум сбросов за 2012 год: # ПРОПУЩЕННЫЕ ЗНАЧЕНИЯ max(sewage$Year12) ## [1] NA Результат имеет тип NA, потому что в данном столбце имеются пропуски. В некоторых статистических задачах это недопустимо. Если вы хотите проигнорировать значения пропусков, следует в вызываемой статистической функции указать дополнительный параметр na.rm = TRUE: max(sewage$Year12, na.rm = TRUE) ## [1] 15678 Еще один вариант — исключить из таблицы те строки, в которых имеются пропущенные значения (хотя бы одно!). Для этого существует функция complete.cases(), возвращающая вектор логических значений: filter&lt;-complete.cases(sewage) filter # посмотрим что получилось. Там где видим FALSE - есть пропуски в строкахsewage.complete &lt;- sewage[filter, ] # отфильтруем полные строки View(sewage.complete) 3.6 Преобразование типов и поиск ошибок Достаточно часто при работе с реальными данными возникает необходимость преобразования их типов. Например, вам необходимо перевести строки в даты, чтобы оперировать ими соответствующим образом. Или принудительным образом указать, что столбец со строками не хранит номинальную переменную (фактор), а его нужно интерпретировать именно как строковый столбец (обычно это полезно, когда столбец содержит какую-то текстовую информацию в виде комментариев по каждому измерению). Наконец, в данных могут быть ошибки, опечатки и так далее, которые могут препятствовать правильному их чтению. В этом разделе мы рассмотрим, как можно: Найти и исправить множественные варианты одного названия с опечатками Исправить ошибки в числовых данных Преобразовать факторы в строки и наоборот Преобразовать строки в числа и наоборот Рассмотрим возможные манипуляции с данными на примере таблицы о землепользовании на территории Сатинского учебного полигоны Географического факультета МГУ: # ПОИСК ОШИБОК tab &lt;- read.csv2(&quot;SatinoLanduse.csv&quot;, encoding = &#39;UTF-8&#39;) str(tab) # посмотрим, какова структура данных ## &#39;data.frame&#39;: 160 obs. of 6 variables: ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Type : Factor w/ 12 levels &quot;Выгоны&quot;,&quot;Вырубки&quot;,..: 11 1 1 9 5 1 5 12 9 10 ... ## $ Administration: Factor w/ 7 levels &quot;&quot;,&quot;РФ&quot;,&quot;Совьяковская администрация&quot;,..: 5 5 5 1 1 5 1 5 5 6 ... ## $ Comment : Factor w/ 35 levels &quot;&quot;,&quot;АО \\&quot;Родина\\&quot;&quot;,..: 30 1 1 1 1 1 1 3 2 1 ... ## $ Perimeter : Factor w/ 160 levels &quot;1014.155593894044800&quot;,..: 67 155 51 104 78 153 17 19 108 57 ... ## $ Area : Factor w/ 160 levels &quot;0.238070145845919&quot;,..: 73 49 121 100 63 72 88 128 99 24 ... View(tab) Видно, что все столбцы, кроме двух, хранящих идентификаторы, были прочитаны как строки и преобразованы в факторы (номинальные переменные). Это означает, что мы не сможем работать привычным образом со столбцами периметра и площади, а столбец комментариев теперь также является номинальной переменной, что противоречит здравому смыслу (он вообще переменной не является). Когда вы отображаете таблицу в консоли или графическом интерфейсе, факторы выглядят и ведут себя как обычные строки. Подвох заключается в том, что хранятся они в виде пар “ключ — значение” (об этом мы говорили выше) и все операции преобразования осуществляются над ключами, а не значениями. Рассмотрим, как следует правильно преобразовывать номинальные переменные в R. Чтобы привести столбцы к нужному типу, необходимо использовать преобразования типов. Для этого можно воспользоваться функциями семейства as, описанными в Главе 1. Для начала преобразуем столбец Comment к обычному символьному представлению: tab$Comment &lt;- as.character(tab$Comment) str(tab) ## &#39;data.frame&#39;: 160 obs. of 6 variables: ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Type : Factor w/ 12 levels &quot;Выгоны&quot;,&quot;Вырубки&quot;,..: 11 1 1 9 5 1 5 12 9 10 ... ## $ Administration: Factor w/ 7 levels &quot;&quot;,&quot;РФ&quot;,&quot;Совьяковская администрация&quot;,..: 5 5 5 1 1 5 1 5 5 6 ... ## $ Comment : chr &quot;Село Беницы&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ Perimeter : Factor w/ 160 levels &quot;1014.155593894044800&quot;,..: 67 155 51 104 78 153 17 19 108 57 ... ## $ Area : Factor w/ 160 levels &quot;0.238070145845919&quot;,..: 73 49 121 100 63 72 88 128 99 24 ... Посмотрим теперь, что произойдет, если мы попытаемся преобразовать столбец Perimeter к числовому виду: as.numeric(tab$Perimeter) ## [1] 67 155 51 104 78 153 17 19 108 57 7 3 158 159 156 50 91 ## [18] 143 6 58 4 5 131 148 113 128 147 114 9 18 118 132 84 134 ## [35] 81 40 130 98 83 157 42 95 71 141 8 100 34 1 87 77 160 ## [52] 93 119 90 74 35 125 150 101 136 31 109 110 103 75 14 32 63 ## [69] 145 56 102 25 65 88 72 53 92 30 117 73 43 54 121 44 52 ## [86] 27 115 149 120 45 26 41 2 60 36 123 29 151 144 106 127 12 ## [103] 116 94 82 146 142 69 21 48 139 105 154 124 47 61 33 80 97 ## [120] 64 10 76 111 11 112 89 28 129 68 39 49 86 96 59 24 137 ## [137] 46 152 55 15 99 85 22 126 16 122 79 66 133 23 107 38 138 ## [154] 13 135 37 140 70 20 62 Вместо значений перметра мы получили загадочные числа, которых в таблице нет. Это и есть ключи факторов. Чтобы получить их значения, необходимо использовать функцию levels() (для краткости выведем первые 10 значений): levels(tab$Perimeter)[1:10] ## [1] &quot;1014.155593894044800&quot; &quot;1019.457949256323400&quot; &quot;1020.278536197552200&quot; ## [4] &quot;1021.109926202218700&quot; &quot;1041.122684298658400&quot; &quot;1060.678503301135200&quot; ## [7] &quot;1081.964408568060900&quot; &quot;1094.945610298295600&quot; &quot;114.701418496307100&quot; ## [10] &quot;1155.916232728818800&quot; Обратите внимание на то, что значения фактора отсортированы в алфавитном порядке, без учете порядка их встречаемости в исходной таблице. Для корректного преобразования факторов в числа необходимо сначала привести их к обычному строковому виду: tab$Perimeter &lt;- as.numeric(as.character(tab$Perimeter)) str(tab) ## &#39;data.frame&#39;: 160 obs. of 6 variables: ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Type : Factor w/ 12 levels &quot;Выгоны&quot;,&quot;Вырубки&quot;,..: 11 1 1 9 5 1 5 12 9 10 ... ## $ Administration: Factor w/ 7 levels &quot;&quot;,&quot;РФ&quot;,&quot;Совьяковская администрация&quot;,..: 5 5 5 1 1 5 1 5 5 6 ... ## $ Comment : chr &quot;Село Беницы&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ Perimeter : num 2396 922 2181 3948 279 ... ## $ Area : Factor w/ 160 levels &quot;0.238070145845919&quot;,..: 73 49 121 100 63 72 88 128 99 24 ... # Теперь попробуем преобразовать столбец Area temp &lt;- as.numeric(as.character(tab$Area)) ## Warning: в результате преобразования созданы NA temp[1:10] ## [1] 286159.159 21651.964 56826.463 450293.759 2612.615 ## [6] 28608.401 3469445.793 62299.631 450291.261 147943.134 Все прошло вроде бы успешно, но с предупреждением, что некоторые значения были преобразованы в NA (Not Available) — отсутствующие значения. По всей видимости, данные в соответствущих ячейках не соответствуют представлениям R о том, как должно выглядеть число: ячейка или пустая, или число набрано с ошибкой/опечаткой. Чтобы найти и исправить все неверно заданные данные, необходимо выполнить следующие действия: Получить индексы всех элементов, имеющих значение NA. Просмотреть, какие значения были в исходных данных под этими индексами Исправить ошибки в этих значениях, если это поддается автоматизации Повторить конвертацию в числовой тип данных Проверку на отсутствующие данные осуществляют с помощью функции is.na(). Передав ей в качестве аргумента вектор значений, вы получите вектор булевых значений, в котором TRUE будет стоять для пустых элементов. Проверим с помощью него, какие элементы столюца Area привели к ошибкам конвертации данных: tab[is.na(temp), &quot;Area&quot;] ## [1] 89499,573298880117000 11922,638460079328000 5153,570673500797100 ## 160 Levels: 0.238070145845919 ... 9865.323033935605100 Видно, что R не справился с преобразованием типов там, где содержится опечатка в десятичном разделителе — вместо точки указана запятая. Для исправления этой ошибки мы можем воспользоваться стандартной функцией замены символа gsub(pattern, replacement, x). Ее стандартные параметры означают соответственно: что искать, на что заменять, где искать: tab$Area &lt;- gsub(&#39;,&#39;, &#39;.&#39;, tab$Area) # заменим запятые на точки tab$Area &lt;- as.numeric(as.character(tab$Area)) # Теперь можно преобразовать в числа str(tab) ## &#39;data.frame&#39;: 160 obs. of 6 variables: ## $ ID : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Type : Factor w/ 12 levels &quot;Выгоны&quot;,&quot;Вырубки&quot;,..: 11 1 1 9 5 1 5 12 9 10 ... ## $ Administration: Factor w/ 7 levels &quot;&quot;,&quot;РФ&quot;,&quot;Совьяковская администрация&quot;,..: 5 5 5 1 1 5 1 5 5 6 ... ## $ Comment : chr &quot;Село Беницы&quot; &quot;&quot; &quot;&quot; &quot;&quot; ... ## $ Perimeter : num 2396 922 2181 3948 279 ... ## $ Area : num 286159 21652 56826 450294 2613 ... Теперь необходимо навести порядок в значениях факторов, убедившись, что и там нет опечаток. Выведем все уникальные значения с помощью функции levels(): levels(tab$Type) ## [1] &quot;Выгоны&quot; &quot;Вырубки&quot; ## [3] &quot;Гидрологические объекты&quot; &quot;Заболоченные земли&quot; ## [5] &quot;Леса&quot; &quot;Лесные поляны&quot; ## [7] &quot;Луга&quot; &quot;Нет данных&quot; ## [9] &quot;Пашни&quot; &quot;Сады&quot; ## [11] &quot;Территории населенных пунктов&quot; &quot;Фермерские хозяйства&quot; levels(tab$Administration) ## [1] &quot;&quot; ## [2] &quot;РФ&quot; ## [3] &quot;Совьяковская администрация&quot; ## [4] &quot;Совьяковская сельскаая администрация&quot; ## [5] &quot;Совьяковская сельская администрация&quot; ## [6] &quot;Совьяковская сельская Администрация&quot; ## [7] &quot;Совьяковская сельская админитрация&quot; Видно, что если с типами все в порядке, то в данных об административном подчинении содержится 5 вариантов названия одной и той же Совьяковской сельской администрации. Помимо этого, пустые ячейки хорошо бы заменить на значение &quot;Прочее&quot;. Чтобы найти все строчки, относящиеся к одному и тому же объекту, можно воспользоваться уже знакомой нам функцией grep(), передав ей подстроку, которая является для них общей. Например, &quot;Совьяковская&quot; (хотя в данном случае было бы вообще достаточно одной буквы &quot;с&quot;). filter &lt;- grep(&quot;Совьяковская&quot;, tab$Administration) # Найдем все записи tab[filter, &quot;Administration&quot;] &lt;- &quot;Совьяковская сельская администрация&quot; # Заменим их одним значением tab$Administration &lt;- droplevels(tab$Administration) # Удаляем неиспользуемые уровни levels(tab$Administration) ## [1] &quot;&quot; ## [2] &quot;РФ&quot; ## [3] &quot;Совьяковская сельская администрация&quot; Пустые строки можно также найти c помощью grep(), но мы этого делать не будем, так как это требует дополнительных знаний о регулярных выражениях. Вместо этого воспользуемся тем, что пустые строки имеют длину 0. Обратите внимание ниже, что преобразование в вектор столбца Administration необходимо, т.к. nchar() не понимает объекты типа data.frame, которыми являются не только таблицы, но и их столбцы: filter &lt;- nchar(as.vector(tab$Administration)) == 0 # TRUE если длина равна 0 # Пробуем заменить: tab[filter, &quot;Administration&quot;] &lt;- &quot;Прочее&quot; ## Warning in `[&lt;-.factor`(`*tmp*`, iseq, value = c(&quot;Прочее&quot;, &quot;Прочее&quot;, : ## неправильный уровень фактора, получились NA Ошибка выше связана с тем, что R строго следит за неизменностью набора значений фактора для того чтобы избежать всевозможных ошибок при работе с данными (опечаток и т.д.). Предыдущий раз мы заменили все значаниея одним из существующих. В данном случае необходимо ввести новое значение фактора. Чтобы это сделать, придется преобразовать данные в символьные, произвести замену срок и после этого снова конвертировать столбец в фактор: tab$Administration &lt;- as.character(tab$Administration) tab[filter, &quot;Administration&quot;] &lt;- &quot;Прочее&quot; tab$Administration &lt;- as.factor(tab$Administration) levels(tab$Administration) ## [1] &quot;Прочее&quot; ## [2] &quot;РФ&quot; ## [3] &quot;Совьяковская сельская администрация&quot; Теперь таблица готова к работе. Можно, например, подсчитать по ней сводную статистику: summary(tab) ## ID Type ## Min. : 1.00 Леса :52 ## 1st Qu.: 40.75 Выгоны :27 ## Median : 80.50 Фермерские хозяйства :22 ## Mean : 80.50 Пашни :15 ## 3rd Qu.:120.25 Луга :11 ## Max. :160.00 Территории населенных пунктов: 8 ## (Other) :25 ## Administration Comment ## Прочее :76 Length:160 ## РФ : 3 Class :character ## Совьяковская сельская администрация:81 Mode :character ## ## ## ## ## Perimeter Area ## Min. : 3.087 Min. : 0 ## 1st Qu.: 421.431 1st Qu.: 5087 ## Median : 939.369 Median : 21260 ## Mean : 1761.654 Mean : 125002 ## 3rd Qu.: 2135.987 3rd Qu.: 83019 ## Max. :23920.945 Max. :3469446 ## Обратите внимание, что строки, интервальные и номинальные (факторы) переменные обрабатываются функцией summary() по-разному. 3.7 Сохранение таблиц Одной из завершающих стадий анализа данных, помимо графиков и отчетов, часто являются новые табличные представления, которые было бы неплохо сохранить в виде файлов. К счастью, сохранение таблиц в R столь же просто, как и чтение. Для текстовых файлов в формате CSV можно использовать функции write.table(), write.csv() и write.csv2(). Для файлов Microsoft Excel используйте функцию write.xlsx() из пакета openxlsx соответственно. По умолчанию функции write.table(), write.csv() и write.csv2() записывают в таблицы в качестве первого столбца названия (номера) строк таблиц. Если вы не хотите, чтобы это происходило, укажите дополнительный параметр row.names=FALSE. Сохраним таблицы okruga и neokruga, раздельно хранящие статистику по объему сброса сточных в поверхностные водные объекты по федеральным округам и субъектам соответственно: # СОХРАНЕНИЕ ТАБЛИЦ write.csv2(okruga, &quot;okruga.csv&quot;, fileEncoding = &#39;UTF-8&#39;) # Сохраним первую таблицу в CSV в кодировке Unicode write.xlsx(neokruga, &quot;neokruga.xlsx&quot;) # Сохраним вторую таблицу в XLSX без названий строк # Проверим, все ли в порядке с сохраненными таблицами: okruga.saved &lt;- read.csv2(&quot;okruga.csv&quot;, encoding = &#39;UTF-8&#39;) head(okruga.saved) ## X Region Year05 Year10 Year11 Year12 ## 1 2 Центральный федеральный округ 4341 3761 3613 3651 ## 2 21 Северо-Западный федеральный округ 3192 3088 2866 2877 ## 3 35 Южный федеральный округ 1409 1446 1436 1394 ## 4 42 Северо-Кавказский федеральный округ 496 390 397 395 ## 5 49 Приволжский федеральный округ 3162 2883 2857 2854 ## 6 64 Уральский федеральный округ 1681 1860 1834 1665 ## Year13 ## 1 3570 ## 2 2796 ## 3 1321 ## 4 374 ## 5 2849 ## 6 1624 neokruga.saved &lt;- read.xlsx(&quot;neokruga.xlsx&quot;,1) head(neokruga.saved) ## Region Year05 Year10 Year11 Year12 Year13 ## 1 Белгородская область 11 77 72 71 71 ## 2 Брянская область 89 78 75 71 68 ## 3 Владимирская область 155 129 126 124 120 ## 4 Воронежская область 169 134 135 131 129 ## 5 Ивановская область 144 102 99 97 88 ## 6 Калужская область 99 92 88 84 93 Видно, что в файле CSV присутствует также дополнительный столбец с названиями строк, а в файле XLSX его нет. Если вы не задавали названия строк явным образом и они не несут какого-то смысла, всегда указывайте параметр row.names=FALSE Вы можете дать строкам таблицы названия и извлечь их, используя функцию row.names() аналогично функции colnames() для столбцов. 3.8 Обработка таблиц в dplyr Пакет dplyr был разработан для того чтобы сделать стандартные операции обработки фреймов данных, такие как сортировка, фильтрация, выбор и добавление переменных (столбцов), агрегирование данных более простым и наглядным. Пакет очень включает в себя 5 базовых функций: Функция Назначение mutate() Вычисление новых переменных select() Выбор переменных по их названиям filter() Выбор строк по заданному критерию (запросу) summarise() Агрегирование значений переменных arrange() Упорядочение фрейма данных по указанным переменным Данные функции можно комбинировать также с функцией group_by() чтобы выполнять операции не надо всеми строками сразу, а над их группами, сгруппированными по значению выбранной переменной. Предположим, нам необходимо отобрать из уже знакомой нам таблицы tab столбцы Year, Total, Caspian, далее вычислить долю Каспийского моря в суммарном объеме сточных вод, отобрать строки, в которых эта доля больше \\(0.45\\) и упорядочить получившуюся таблицу по возрастанию этой доли. Дополнительно еще посчитаем суммарный сброс и среднюю долю Каспийского мор: # DPLYR library(dplyr) tab &lt;- read.csv2(&quot;oxr_vod.csv&quot;) colnames(tab) &lt;- c(&quot;Year&quot;, &quot;Total&quot;, &quot;Baltic&quot;, &quot;Black&quot;, &quot;Azov&quot;, &quot;Caspian&quot;, &quot;Kara&quot;, &quot;White&quot;, &quot;Other&quot;) # Выбор переменных Year, Total, Caspian caspian &lt;- select(tab, Year, Total, Caspian) head(caspian) ## Year Total Caspian ## 1 1993 27.2 12.1 ## 2 1994 24.6 11.0 ## 3 1995 24.5 10.4 ## 4 1996 22.4 9.8 ## 5 1997 23.0 9.8 ## 6 1998 22.0 9.5 # Вычисление нового столбца caspianRatio caspian &lt;- mutate(caspian, caspianRatio = round(Caspian / Total, 3)) head(caspian) ## Year Total Caspian caspianRatio ## 1 1993 27.2 12.1 0.445 ## 2 1994 24.6 11.0 0.447 ## 3 1995 24.5 10.4 0.424 ## 4 1996 22.4 9.8 0.438 ## 5 1997 23.0 9.8 0.426 ## 6 1998 22.0 9.5 0.432 # Фильтрация по значению caspianRatio caspian &lt;- filter(caspian, caspianRatio &gt; 0.445) head(caspian) ## Year Total Caspian caspianRatio ## 1 1994 24.6 11.0 0.447 ## 2 2000 20.3 9.2 0.453 ## 3 2001 19.8 8.9 0.449 ## 4 2002 19.8 9.2 0.465 ## 5 2004 18.5 8.3 0.449 ## 6 2005 17.7 8.0 0.452 # Сортировка по значению caspianRatio caspian &lt;- arrange(caspian, caspianRatio) head(caspian) ## Year Total Caspian caspianRatio ## 1 2006 17.5 7.8 0.446 ## 2 2012 15.7 7.0 0.446 ## 3 1994 24.6 11.0 0.447 ## 4 2001 19.8 8.9 0.449 ## 5 2004 18.5 8.3 0.449 ## 6 2005 17.7 8.0 0.452 # Агрегирование данных stats &lt;- summarise(caspian, total.sum = sum(Total), mean.ratio = mean(caspianRatio)) print(stats) ## total.sum mean.ratio ## 1 169.1 0.4512222 Обратите внимание на то, что названия столбцов указываются без кавычек! Использование dplyr целым обладает рядом преимуществ по сравнению с применением стандартных средств R: вызов функций с говорящими названиями операции более понятными; код выглядит более чистым и легко читаемым за счет отсутствия обращений к фреймам данных через квадратные скобки и доллары; код с использованием функций dplyr часто оказывается короче, чем его традиционные аналоги; операции dplyr можно выстраивать в последовательности с помощью пайп-оператора %&gt;%, доступного в R через пакет magrittr (устанавливается вмете с dplyr. Пайп-оператор %&gt;% предназначен для компактной и наглядной записи последовательностей обработки данных. Например, выше мы применили целых 4 операции к исходной таблице (select, mutate, filter, arrange), прежде чем получить искомый результат. Промежуточные результаты нас мало интересовали, при этом мы каждый раз перезаписывали исходную таблицу (могли и новую делать каждый раз, что сделало бы код еще более громоздким). С помощью пайп-оператора %&gt;% вышеприведенный код можно записать так: result &lt;- tab %&gt;% select(Year, Total, Caspian) %&gt;% mutate(caspianRatio = round(Caspian / Total, 3)) %&gt;% filter(caspianRatio &gt; 0.445) %&gt;% arrange(caspianRatio) head(result) ## Year Total Caspian caspianRatio ## 1 2006 17.5 7.8 0.446 ## 2 2012 15.7 7.0 0.446 ## 3 1994 24.6 11.0 0.447 ## 4 2001 19.8 8.9 0.449 ## 5 2004 18.5 8.3 0.449 ## 6 2005 17.7 8.0 0.452 Обратите внимание, что мы уже не подставляли исходный фрейм данных в качестве первого параметра при вызове функций dplyr, а направляли его посредством пайп-оператора. Этот оператор работает следующим образом: x %&gt;% f эквивалентно f(x) x %&gt;% f(y) эквивалентно f(x, y) x %&gt;% f %&gt;% g %&gt;% h эквивалентно h(g(f(x))) В частности, первая операция select(tab, Year, Total, Caspian) была нами переписана в виде tab %&gt;% select(Year, Total, Caspian). Если бы мы попытались написать ту же последовательность операций одним выражением в традиционной парадигме, это выглядело бы вот так: result &lt;- arrange( filter( mutate( select(tab, Year, Total, Caspian), caspianRatio = round(Caspian / Total, 3) ), caspianRatio &gt; 0.445 ), caspianRatio ) Согласитесь, ненаглядно и несколько устрашающе? К тому же, читать такой код надо задом наперед (изнутри наружу), чтобы понять последовательность действий. Синтаксис с использованием пайп-оператора позволяет: упорядочить операции по обработке данных слева направо (в противоположность направлению изнутри наружу); избежать вложенных вызовов функций (матрёшки); минимизировать количество переменных для храненния промежуточных результатов; упростить добавление новых операций по обработке данных в любое место последовательности. Таким образом, можно рекомендовать пакет dplyr в качестве стандартного средства манипуляции фреймами данных, особенно когда речь идет о большом количестве преобразований. При этом последовательности преобразований, в которых промежуточные результаты нигде больше не используются, следует оформлять одним выражением с использованием пайп-оператора %&gt;%. Пайп-оператор %&gt;% можно быстро набрать в RStudio, нажав клавиатурное сочетание Ctrl + Shift + M (Cmd + Shift + M на помпьютерах Mac) 3.9 Правила подготовки таблиц для чтения в R С таблицами, которые мы использовали в настоящем модуле, все прошло относительно гладко, поскольку они были подготовлены специальным образом. Несмотря на то, что каких-то четких правил подготовки таблиц для программной обработки не существует, можно дать несколько полезных рекомендаций по данному поводу: В первой строке таблицы должны располагаться названия столбцов. Во второй строке таблицы должны начинаться данные. Не допускайте многострочных заголовков. В названиях столбцов недопустимы объединенные ячейки, покрывающие несколько столбцов. Это может привести к неверному подсчету количества столбцов и, как следствие, некорректному чтению таблицы в целом. Названия столбцов должны состоять из латинских букв и цифр, начинаться с буквы и не содержать пробелов. Сложносочиненные названия выделяйте прописными буквами. Плохое название столбца: Валовый внутренний продукт за 2015 г.. Хорошее название столбца: GDP2015. Некоторые ошибки данных в таблицах (такие как неверные десятичные разделители), проще найти и исправить в табличном/текстовом редакторе, нежели после загрузки в R. Следование этим правилам значительно облегчит работу с табличными данными. 3.10 Контрольные вопросы и задачи 3.10.1 Вопросы Назовите принципы формата CSV Какие пакеты позволяют читать файлы в формате Microsoft Excel? Какие их них позволяют еще и записывать такие файлы? В каких кодировках сохраняются файлы в операционных системах Windows и UNIX/Linux/macOS? Что делать, чтобы правильно прочесть таблицу, сохраненную не в кодировке вашей операционной системы? Можно ли изменять типы данных столбцов после чтения таблицы? Если да, то какими средствами это можно сделать? Как просмотреть в консоли шапку или конец таблицы? Можно ли при этом определить количество отображаемых строк? Как просмотреть таблицу в графическом интерфейсе RStudio? Какая форма обращения к столбцу вызвращает вектор? Какая форма обращения к столбцу возвращает фрейм данных? Какие существуют способы обратиться к столбцу фрейма данных по его названию? Как удалить столбец в фрейме данных? Как выбрать требуемые столбцы фрейма данных, указав ненужные столбцы? Как отсортировать фрейм данных по одному столбцу? Нескольким столбцам? Какие функции-агрегаторы стандартной библиотеки позволяют считать суммы по столбцам и строкам? К каким компонентам фрейма данныз применяются операции фильтрации (filter) и выборки (select)? Что применяется к строкам, а что — к столбцам? Какую функцию стандартной библиотеки можно использовать для поиска строк и их фрагментов? Перечислите основные функции пакета dplyr для преобразования таблиц. Какие задачи они помогают решать? Для чего нужен пайп-оператор %&gt;%? Какие виды рабочих процессов он позволяет упростить? 3.10.2 Задачи Самсонов Т.Е. Визуализация и анализ географических данных на языке R. М.: Географический факультет МГУ, 2017. DOI: 10.5281/zenodo.901911 "],
["graphics.html", "Глава 4 Основы графики в R 4.1 Стандартные графики 4.2 Гистограммы 4.3 Столбчатые графики 4.4 Круговые (секторные) диаграммы 4.5 Цвет и прозрачность 4.6 Настройки отображения 4.7 Легенда 4.8 Контрольные вопросы и задачи", " Глава 4 Основы графики в R Программный код главы Данный модуль посвящен введению в работу с графическим представлением информации в R. Построение графиков на языке R сродни работе с конструктором: вы собираете изображение по кирпичикам из множества настроек и компонент. Поняв основные принципы базовой графической подсистемы R из пакета graphics, вы сможете освоить дополнительные библиотеки lattice, ggplot2 и plotly, предоставляющие еще более интересные возможности с точки зрения функциональности и дизайна. Прежде чем мы приступим к построению графиков, необходимо подготовить исходные данные. Мы будем работать с теми же таблицами, что и в предыдцщей лекции: экспорт/импорт продукции по регионам России (млн долл. США) и объем сброса сточных вод по морям России (млрд м\\(^3\\)). На этот раз мы воспользуемся пакетом readxl, который возволяет задать типы столбцов при чтении: library(readxl) # Прочтем таблицу по экспорту/импорту продукции в регионах России types &lt;- c(&quot;text&quot;, rep(&quot;numeric&quot;, 12)) tab &lt;- as.data.frame(read_excel(&quot;ExpImp.xlsx&quot;, 1, col_types = types)) str(tab) ## &#39;data.frame&#39;: 96 obs. of 13 variables: ## $ Регион : chr &quot;Российская Федерация&quot; &quot;Центральный федеральный округ&quot; &quot;Белгородская область&quot; &quot;Брянская область&quot; ... ## $ ПродЭкспорт: num 16196.2 4552.9 221.9 28.5 177.9 ... ## $ ПродИмпорт : num 43076 22954 614 650 454 ... ## $ ТЭКЭкспорт : num 371791.8 204331.7 64.7 5 0.9 ... ## $ ТЭКИмпорт : num 3613.6 1660.3 24.1 20.5 16.7 ... ## $ ХимЭкспорт : num 30739.2 8442.7 33.3 24.5 87.7 ... ## $ ХимИмпорт : num 50129.5 34870.4 242.8 71.7 419 ... ## $ ДревЭкспорт: num 10965.8 1101.6 6.2 23.4 57.1 ... ## $ ДревИмпорт : num 6641.5 3942.6 43.3 44.9 9 ... ## $ МетЭкспорт : num 40859.3 9877 2014.1 50.5 29 ... ## $ МетИмпорт : num 22017.4 11763.6 1207.3 68.3 56.6 ... ## $ МашЭкспорт : num 28338.5 12845.9 84.1 143.2 286.1 ... ## $ МашИмпорт : num 154371 96196 1710 823 469 ... # Выгрузим данные по федеральным округам в отдельную таблицу filter &lt;- grep(&quot;федеральный округ&quot;, tab$Регион) okr &lt;- tab[filter, ] # Отсортируем данные по федеральным округам в алфавитном порядке: okr &lt;- okr[order(okr$Регион), ] # Выгрузим данные по субъектам в отдельную таблицу filter &lt;- grepl(&quot;федеральный округ|Федерация|числе&quot;,tab$Регион) sub &lt;- tab[!filter, ] 4.1 Стандартные графики Графики (точечные и линейные) – базовый и наиболее часто используемый способ визуализации. Универсальная функция plot() позволяет строить графики по координатам \\(X\\) и \\(Y\\), которые передаются, соответственно, в первый и второй аргумент. Если переменные \\(X\\) и \\(Y\\) не связаны друг с другом явным образом, то такой график называется диаграммой рассеяния. 4.1.1 Диаграммы рассеяния Диаграмма рассеяния позволяет установить, есть ли зависимость между переменными, а также понять, как объекты дифференцируются по значениям переменных. par(mar=c(4,4,3,2)) # Диаграмма рассеяния по экспорту и импорту: plot(sub$МетЭкспорт, sub$МетИмпорт, col=&quot;red&quot;, xlab=&quot;Экспорт, млн. долл. США&quot;, ylab = &quot;Импорт, млн. долл. США&quot;, main = &quot;Экспорт/импорт металлов и изделий из них по субъектам РФ&quot;) В данном случае четко выделяется группа субъектов вблизи начала координат, не отличающихся интенсивным экспортом и импортом продукции металлургии, а также очевидно преобладание экспорта над импортом при больших объемах товарооборота. При построении диаграмм рассеяния важно сохранить одинаковый масштаб по осям \\(X\\) и \\(Y\\). Чтобы обеспечить это условие, необходимо использовать параметр asp = 1: plot(sub$МетЭкспорт, sub$МетИмпорт, col=&quot;red&quot;, xlab=&quot;Экспорт, млн. долл. США&quot;, ylab = &quot;Импорт, млн. долл. США&quot;, main = &quot;Экспорт/импорт металлов и изделий из них по субъектам РФ&quot;, asp = 1) Попробуйте изменить размер окна на вкладке Plots. Вы увидите, что масштаб по осям сохраняется пропорциональным. Размер и тип значка можно изменить, используя параметры pch = и cex =. Размеры масштабируются параметром cex относительно условной единицы — стандартного размер значка. Сам значок можно выбрать, используя его код в соответствии с нижеприведенным рисунком (на самом деле, вы можете выбирать произвольные символы для визуализации точек): Типы символов R plot(sub$МетЭкспорт, sub$МетИмпорт, col=&quot;red&quot;, xlab=&quot;Экспорт, млн. долл. США&quot;, ylab = &quot;Импорт, млн. долл. США&quot;, main = &quot;Экспорт/импорт металлов и изделий из них по субъектам РФ&quot;, asp = 1, pch = 2, cex = 0.5) plot(sub$МетЭкспорт, sub$МетИмпорт, col=&quot;red&quot;, xlab=&quot;Экспорт, млн. долл. США&quot;, ylab = &quot;Импорт, млн. долл. США&quot;, main = &quot;Экспорт/импорт металлов и изделий из них по субъектам РФ&quot;, asp = 1, pch = 20, cex = 1.2) 4.1.2 Линейные графики Линейные графики отражают связь между зависимой и независимой переменной. Существует два способа нанесения линий на график: явное рисование линий поверх уже построенного графика с помощью функции lines(), или создание нового линейного графика с помощью функции plot() с дополнительным параметром type =. Для иллюстрации принципов работы первого способа откроем еще раз данные по объему сброса загрязненных сточных вод по морям России (млрд куб. м): tab &lt;- read.csv2(&quot;oxr_vod.csv&quot;, encoding = &#39;UTF-8&#39;) plot(tab$Год, tab$Каспийское, pch=20) # для начала нанесем точки lines(tab$Год, tab$Каспийское) # теперь нанесем линии По умолчанию функция plot() рисует именно точки. Однако если точки не нужны, а достаточно только линий, или требуется иной подход к построению графиков, можно задать параметр type =, который принимает следующие значения: &quot;p&quot; for points, &quot;l&quot; for lines, &quot;b&quot; for both, &quot;c&quot; for the lines part alone of “b”, &quot;o&quot; for both ‘overplotted’, &quot;h&quot; for ‘histogram’ like (or ‘high-density’) vertical lines, &quot;s&quot; for stair steps, &quot;S&quot; for other steps, see ‘Details’ below, &quot;n&quot; for no plotting. Попробуем разные методы визуализации: plot(tab$Год, tab$Карское,pch=20) plot(tab$Год, tab$Каспийское, type=&quot;p&quot;) plot(tab$Год, tab$Каспийское, type=&quot;l&quot;) plot(tab$Год, tab$Каспийское, type=&quot;b&quot;) plot(tab$Год, tab$Каспийское, type=&quot;c&quot;) plot(tab$Год, tab$Каспийское, type=&quot;o&quot;) plot(tab$Год, tab$Каспийское, type=&quot;h&quot;) plot(tab$Год, tab$Каспийское, type=&quot;s&quot;) Толщину и тип линии можно изменить, используя параметры lwd = и lty = соответственно. Работают они аналогично параметрам pch и cex для точечных символов. Типов линий по умолчанию в стандартной библиотеке R не так много, но в сочетании с цветовым кодированием и толщиной их оказывается вполне достаточно: Попробуем разные варианты представления линий: plot(tab$Год, tab$Каспийское, type=&quot;l&quot;, lwd = 2, lty = 1) plot(tab$Год, tab$Каспийское, type=&quot;l&quot;, lwd = 3, lty = 2) plot(tab$Год, tab$Каспийское, type=&quot;l&quot;, lwd = 1, lty = 3) 4.1.3 Совмещение графиков Часто бывает необходимо совместить на одном графике несколько рядов данных. Для этого можно поступить двумя путями: Нарисовать один ряд данных c помощью функции plot(), а затем добавить к нему другие ряды с помощью функций points() и lines(). Нарисовать пустой график, а затем добавить к нему все ряды данных с помощью функций points() и lines(). При совмещении нескольких рядов данных на одном графике в первом же вызове функции plot() необходимо заложить диапазон значений по осям \\(X\\) и \\(Y\\), охватывающий все ряды данных. В противном случае будет учтен только разброс значений первого ряда данных, и остальные ряды могут не поместиться в поле графика. Вариант №1 реализуется следующим образом: plot(tab$Год, tab$Каспийское, pch=20, type=&quot;o&quot;, ylim = c(0,12), col=&quot;red3&quot;) # Добавим теперь на существующий график новый ряд данных, используя функции points() и lines(): points(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) lines(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) Обратите внимание на то, что если бы мы вызвали еще одну инструкцию plot() с новым рядом данных, это привело бы к построению нового графика, а не к добавлению его на существующий. Теперь рассмотрим второй вариант. Заодно устраним недостаток предыдущего кода, в котором диапазон значений по оси \\(Y\\) указывался вручную. xrange = range(tab$Год) # вычислим диапазон по оси X yrange = range(tab$Каспийское, tab$Карское, tab$Азовское) # вычислим диапазон по оси Y # Построим пустой график, охватывающий полный диапазон данных, и имеющий все необходимые сопроводительные элементы plot(xrange, yrange, main=&quot;Объем сброса загрязненных сточных вод&quot;, xlab=&quot;Год&quot;, ylab=&quot;млрд.куб.м&quot;, type = &quot;n&quot;) # n означает, что ряд данных рисоваться не будет # Теперь добавим на график ряды данных points(tab$Год, tab$Каспийское, pch=20, col=&quot;red3&quot;) lines(tab$Год, tab$Каспийское, pch=20, col=&quot;red3&quot;) points(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) lines(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) points(tab$Год, tab$Азовское, pch=20, col=&quot;steelblue&quot;) lines(tab$Год, tab$Азовское, pch=20, col=&quot;steelblue&quot;) 4.1.4 Функциональные параметры Графические параметры при построении графиков на самом деле могут быть не константами, а функцией данных. Например, вы можете сказать, что размер точки при построении диаграммы рассеяния должен быть функцией отношения экспорта к импорту, что усилит наглядность отображения: plot(okr$МетЭкспорт, okr$МетИмпорт, col=rgb(1,0,0,0.5), xlab=&quot;Экспорт, млн. долл. США&quot;, ylab = &quot;Импорт, млн. долл. США&quot;, main = &quot;Экспорт/импорт металлов и изделий из них по ФО РФ (2013 г.)&quot;, asp = 1, pch = 20, cex = 2+log(sub$МетИмпорт/sub$МетЭкспорт)) # размер кружка зависит от соотношения импорта и экспорта 4.2 Гистограммы Гистограммы распределения строятся с помощью функции hist(). Чтобы изменить ширину кармана (столбца) гистограммы, необходимо задать параметр breaks =, а цвет задается в параметре col: hist(sub$ПродЭкспорт) # Карманы будут от 0 до 3000 через 100. Заодно добавим цвет: hist(sub$ПродЭкспорт, breaks = seq(0,3000,100), col=&quot;olivedrab3&quot;) При построении гистограммы (как и любого другого типа графика) вы можете использовать не весь массив данных, а только его подмножество Например, можно посмотреть гистограмму только для субъектов с объемом эспорта менее 300: hist(sub$ПродЭкспорт[sub$ПродЭкспорт &lt; 300], col = &quot;olivedrab3&quot;, breaks = seq(0, 300, 20)) Наконец, вы можете осуществить преобразование ряда данных перед построением гистограммы. Например, взять логарифм, чтобы проверить,похоже ли распределение на логнормальное: hist(log(sub$ПродЭкспорт), col = &quot;olivedrab3&quot;) 4.3 Столбчатые графики Столбчатые графики — barplot — отображают вектор числовых данных в виде столбиков. Это простейший вид графика (наряду с dotchart), который используется для сравнения асболютных величин. Для построения необходимо вызвать функцию barplot() и передать ей столбец таблицы: barplot(okr$ХимЭкспорт) # Или даже просто вектор натуральных чисел от -5 до 5: barplot(-5:5) # Если у каждого столбика есть название, # нужно передать вектор названий в аргумент names.arg = barplot(okr$ХимЭкспорт, names.arg = okr$Регион) # при наличии длинных подписей удобнее столбчатую диаграмму разместить горизонтально, используя параметр horiz = TRUE. barplot(okr$ХимЭкспорт, names.arg = okr$Регион, horiz=TRUE) Чтобы развернуть подписи перпендикулярно столбцам, следует использовать параметр las =. Справка__R__говорит нам о том, что этот параметр дает следующее поведение подписей: 0: всегда параллельно осям (по умолчанию), 1: всегда горизонтально, 2: всегда перпендикулярно осям, 3: всегда вертикально. Выберем вариант, при котором подписи всегда горизонтальны: barplot(okr$ХимЭкспорт, names.arg = okr$Регион, horiz=TRUE, las = 1) В данном случае очень массивные названия федеральных не умещаются в пространство графика. Можно было бы вполне убрать словосочетание “федеральный округ”. Для этого используем уже знакомую нам sub(). names &lt;- sub(&quot;федеральный округ&quot;, &quot;&quot;, okr$Регион) # &quot;&quot; - означает пустая строка barplot(okr$ХимЭкспорт, names.arg = names, horiz = TRUE, las = 1) И снова содержимое не поместилось в поле графика. Проблема в том, что вокруг любого графика резервируются поля ограниченного размера для размещения подписей координат и т.д. Автоматически эти поля не пересчитываются, зарезервировать их — ваша задача. Наберите в консоли ?par. Откроется список всевозможных графических параметров, которые управляют компоновкой и порядком построения графиков. Эти параметры можно установить, вызвав функцию par(). Все дальнейшие вызовы инструкций построения графиков будут учитывать установленные параметры Пролистайте страницу справки вниз и найдите параметр mar = — он отвечает за установку полей в условных единицах. Есть также параметр mai =, который позволяет установить поля графика в дюймах. Обратите внимание на то, что означают параметры этой функции: # mar=c(bottom, left, top, right) # The default is c(5, 4, 4, 2) + 0.1. Поскольку в нашем примере проблемы возникают в левым полем, необходимо увеличить второй параметр. margins.default &lt;- par(&quot;mar&quot;) # запишем текущее значение, чтобы восстановить его потом par(mar = c(5, 10, 4, 2)) # увеличим поле left до 10 условных единиц barplot(okr$ХимЭкспорт, names.arg = names, horiz=TRUE, las = 1) Добавим заголовок с помощью параметра main =, а подпись единиц измерения по оси \\(X\\) — с помощью параметра xlab =. Поскольку количество параметров функции уже достаточно велико, введем каждый из них с новой строчки, чтобы улучшить читаемость кода: barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1) # Чтобы увеличить диапазон оси X, можно использовать параметр xlim = c(min, max): barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1, xlim = c(0,12000)) Работа с цветом на столбчатых диаграммах рассмотрена ниже в отдельном разделе. 4.4 Круговые (секторные) диаграммы Круговые диаграммы (англ. piechart) строятся с помощью функции pie(): par(mar = c(5, 5, 5, 5)) # установим поля pie(okr$ХимЭкспорт) # вместо номеров можно использовать подписи секторов, добавив второй параметр: pie(okr$ХимЭкспорт, names) # в каждую метку можно добавить процент данного округа в общей массе. Для этого его нужно сначала посчитать: percentage &lt;- 100 * okr$ХимЭкспорт / sum(okr$ХимЭкспорт) # и округлить до 1 знака после запятой: percentage &lt;- round(percentage, digits = 1) Можно присоединить проценты к названиям округов, добавив обрамляющие скобки. Чтобы функция paste не добавляля пробелы между присоединяемыми строками, необходимо задать параметр sep = , передав ему пустую строку — “”: names2&lt;-paste(names, &quot; (&quot;, percentage, &quot;%)&quot;, sep = &quot;&quot;) # Используем для аннотирования круговых секторов: pie(okr$ХимЭкспорт, names2) # Добавить заголовок можно также с помощью параметра main = pie(okr$ХимЭкспорт, names2, main = &quot;Доля федеральных округов в экспорте продукции химической промышленности&quot;) Чтобы перенести часть заголовка на вторую строку, вы можете использовать управляющий символ перевода строки \\n, вставив его в требуемое место: pie(okr$ХимЭкспорт, names2, main = &quot;Доля федеральных округов в экспорте \\n продукции химической промышленности&quot;) Управляющие символы играют большое значение в программировании и используются для управления поведением текстового вывода. Нотация \\n называется escape-последовательностью. Помимо перевода строки, есть и другие полезные управляющие символы. Кстати, именно из-за того, что escape-последовательности начинаются с обратной косой черты (\\), при указании системных путей в функции setwd() всегда следует использовать прямую косую черту (/). Например, следующий путь не будет найдет, поскольку он содержит управляющие последовательности \\n и \\t: C:\\data\\tables\\new. Наконец, при использовании секторных диаграмм важно уметь менять порядок секторов. По умолчанию сектора откладываются против часовой стрелки начиная с восточного направления. Чтобы сектора откладывались по часовой стрелке с северного направления, следует задать параметр clockwise = TRUE. pie(okr$ХимЭкспорт, names2, main = &quot;Доля федеральных округов в экспорте \\n продукции химической промышленности&quot;, clockwise = TRUE) Работа с цветом на круговых диаграммах рассмотрена ниже в отдельном разделе. 4.5 Цвет и прозрачность Цвет — одно из основных графических средств, используемых на графиках и диаграммах, поэтому данная тема рассмотрена более подробно в отдельном разделе. Определить цвет можно различными способами. Во-первых, в R есть палитра предопределенных цветов, которые можно выбирать по их названию). Список называний цветов можно посмотреть, вызвав функцию colors(): head(colors()) ## [1] &quot;white&quot; &quot;aliceblue&quot; &quot;antiquewhite&quot; &quot;antiquewhite1&quot; ## [5] &quot;antiquewhite2&quot; &quot;antiquewhite3&quot; Основной цвет любого графика или диграмма задается параметром col =. Это цвет (или цвета) с помощью которых будут отображаться данные. Попробуем изменить цвет графика с серого на пастельно-синий: par(mar = c(5, 10, 4, 2)) # увеличим поле left до 10 условных единиц barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1, xlim = c(0,12000), col = &quot;steelblue&quot;) Помимо этого вы можете задать цвет с помощью цветовых компонент в различных пространствах. Для этого вы должны быть знакомы с основами теории цвета (посмотрите презентацию UsingColorInR.pdf. Например, фиолетовый цвет в пространстве RGB можно задать с помощью функции rgb(), смешав синюю и красную компоненты: violet = rgb(0.4, 0, 0.6) barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1, xlim = c(0,12000), col = violet) Чтобы сделать цвет полупрозрачным, есть две возможности: При создании нового цвета — передать в функцию rgb() дополнительный параметр alpha =, который задает долю прозрачности в диапазоне от 0 до 1. При модификации существующего цвета — вызвать функцию adjustcolor() с параметром alpha = Например: violet.transp = adjustcolor(violet, alpha = 0.5) barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1, xlim = c(0,12000), col = violet.transp) green.transp = rgb(0, 1, 0, 0.5) # появился четвертый параметр barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1, xlim = c(0,12000), col = green.transp) Функция adjustcolor() позволяет модифицировать все компоненты цвета, не только прозрачность. На графике типа barplot вы имеете фактически несколько переменных, которые представлены столбиками. А это означает что для них можно использовать различные цвета. Вы можете передать в параметр col = вектор из цветов, соответствующих столбикам: colors &lt;- c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;pink&quot;, &quot;white&quot;,&quot;black&quot;) barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1, xlim = c(0,12000), col = colors) На самом деле, такой винегрет из цветов на столбчатых диаграммах использовать не принято. Но вы должны понимать, что при необходимости можно поменять цвет отдельно выбранных столбиков. Например, мы можем показать красным цветом Wентральный и Приволжский округа, которые являются лидерами по экспорту продукции химической промышленности: colors &lt;- rep(&quot;gray&quot;, 8) # сделаем 8 серых цветов colors[2] &lt;- &quot;red&quot; colors[7] &lt;- &quot;red&quot; barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1, xlim = c(0,12000), col = colors) Еще одна интересная особенность использования цвета заключается в том, что количество указанных цветом может не совпадать с количеством рядов данных. Вы можете указать 2 или 3 цвета, и они будут циклически повторяться при визуализации данных: colors&lt;-c(&quot;gray&quot;,&quot;steelblue&quot;) barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz =TRUE, las = 1, xlim = c(0, 12000), col = colors) Наконец, вещь, которой совершенно необходимо уметь пользоваться при работе с цветом в R — это цветовые палитры. Палитры чрезвычайно удобны, когда необходимо сгенерировать множество цветов, зная лишь основные оттенки. Для этого нужно создать палитру, используя функцию colorRampPalette(): # задаем 2 опорных цвета: черный белый palet&lt;-colorRampPalette(c(&quot;black&quot;,&quot;white&quot;)) # и автоматически генерируем 8 цветов между ними: colors&lt;-palet(8) # используем их для отображения: barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz = TRUE, las = 1, xlim = c(0, 12000), col= colors) # вы можете включить в палитру произвольное количество цветов: palet&lt;-colorRampPalette(c(&quot;steelblue&quot;,&quot;white&quot;,&quot;purple4&quot;)) colors&lt;-palet(8) barplot(okr$ХимЭкспорт, names.arg = names, main = &quot;Экспорт продукции химической промышленности&quot;, xlab = &quot;млн долл. США&quot;, horiz=TRUE, las = 1, xlim = c(0, 12000), col= colors) В R cуществует множество стандартных палитр, их список можно найти в справке и документации. Наиболее полезные из них: colors() gray() rainbow() heat.colors() topo.colors() terrain.colors() Напрмер, вы можете изменить цвета диаграммы, взяв их из одной из палитр или выбрав случайным образом из полной палитры цветов, используя функцию sample(): pie(okr$ХимЭкспорт, names2, main = &quot;Доля федеральных округов в экспорте \\n продукции химической промышленности&quot;, col=rainbow(length(names2))) pie(okr$ХимЭкспорт, names2, main = &quot;Доля федеральных округов в экспорте \\n продукции химической промышленности&quot;, col=sample(colors(),5)) Более богатый набор палитр можно найти в библиотеке RColorBrewer, которая представляет собой интерпретацию палитр, доступных на сайте colorbrewer2.org library(RColorBrewer) # Откроем библиотеку RColorBrewer: display.brewer.all() # Посмотрим, какие в ней имеются палитры К каждой из этих палитр можно обратиться по названию с помощью функции brewer.pal(). Поскольку нам необходимы цвета для категориальных данных, следует использовать палитры из средней части (Set3 - Accent) # выберем цвета из палитры Set2 по количеству секторов в круге: colors &lt;- brewer.pal(length(names2),&quot;Set1&quot;) # И используем их при визуализации par(mar = c(5, 5, 5, 5)) # установим поля pie(okr$ХимЭкспорт, names2, main = &quot;Доля федеральных округов в экспорте \\n продукции химической промышленности&quot;, col=colors) # Попробуем палитру Accent: pie(okr$ХимЭкспорт, names2, main = &quot;Доля федеральных округов в экспорте \\n продукции химической промышленности&quot;, col=brewer.pal(length(names2),&quot;Accent&quot;)) 4.6 Настройки отображения 4.6.1 Графические параметры Изменять размеры элементов графика можно независимо друг от друга, используя следующие параметры: cex — общий масштаб элементов на графике cex.axis — масштаб подписей координат на оси cex.lab — масштаб подписей названий осей cex.main — масштаб заголовка графика cex.sub — масштаб подзаголовка графика cex.names — масштаб подписей факторов (для некоторых типов диаграмм) Например: plot(tab$Год, tab$Каспийское, pch=20, type=&quot;o&quot;, ylim = c(0,12), col=&quot;red3&quot;, main=&quot;Объем сброса загрязненных сточных вод&quot;, xlab=&quot;Год&quot;, ylab=&quot;млрд.куб.м&quot;, cex.axis=0.8, cex.lab=0.7, cex.main=0.9, cex = 0.8) points(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;,cex = 0.8) lines(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) points(tab$Год, tab$Азовское, pch=20, col=&quot;steelblue&quot;,cex = 0.8) lines(tab$Год, tab$Азовское, pch=20, col=&quot;steelblue&quot;) Аналогично происходит тонкая настройка цвета: col цвет графика col.axis цвет подписей координат col.lab цвет названий осей col.main цвет заголовка col.sub цвет подзаголовка fg цвет элементов переднего плана (оси, рамка и т.д.) bg цвет фона графика (background) plot(tab$Год, tab$Каспийское, pch=20, type=&quot;o&quot;, ylim = c(0,12), col=&quot;red3&quot;, main=&quot;Объем сброса загрязненных сточных вод&quot;, xlab=&quot;Год&quot;, ylab=&quot;млрд.куб.м&quot;, cex.axis=0.8, cex.lab=0.7, cex.main=0.9, col.lab = &quot;grey50&quot;, fg = &quot;grey40&quot;) points(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) lines(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) points(tab$Год, tab$Азовское, pch=20, col=&quot;steelblue&quot;) lines(tab$Год, tab$Азовское, pch=20, col=&quot;steelblue&quot;) 4.6.2 Разметка осей, рамка, сетка координат и произвольные линии По умолчанию R подбирает оптимальный с точки зрения него шаг разметки осей, в зависимости от разброса значений по осям \\(X\\) и \\(Y\\), а также размеров графического устройства, на котором производится рисование. Изменяя размер окна прорисовки, вы получите различную разметку осей. В то же время, часто возникает желание (или необходимость) самостоятельно управлять шагом разметки сетки. Для этого необходимо: Вызвать функцию plot(), передав ей дополнительно параметр axes = FALSE (убирает при рисовании обе оси) или один из параметров xaxt=&quot;n&quot; / yaxt=&quot;n&quot; (убирают оси \\(X\\) и \\(Y\\) соответственно) Вызвать столько раз функцию axis(), сколько вы хотите нарисовать осей, передав ей параметры для рисования каждой оси. Функция axis() принимает следующие параметры: side — сторона графика, на которой будет нарисована ось (1=bottom, 2=left, 3=top, 4=right) at — вектор значений, в которых должны быть нарисованы метки оси labels — вектор подписей, которые будут нарисованы в местоположениях, указанных в параметре at. Этот параметр можно пропустить, если подписи совпадают с местоположениями меток pos — координата, вдоль которой будет нарисована ось lty — тип линии col — цвет линии и меток las — расположение подписей параллельно (\\(0\\)) или перпендикулярно (\\(2\\)) оси tck — длина метки относительно размера графика. Отрицательные значения дают метки, выходящие за пределы графика. положительные — внутрь графика. \\(0\\) убирает метки, \\(1\\) рисует линии сетки. При ручном построении осей полезно сразу же нарисовать рамку вокруг графика, используя функцию box(). Например: plot(tab$Год, tab$Каспийское, type = &quot;l&quot;, axes = FALSE) axis(side = 1, at = seq(min(tab$Год), max(tab$Год), 1), tck = -0.02, labels = FALSE) # разметим ось X через 1 год, но рисовать подписи не будем axis(side = 1, at = seq(min(tab$Год), max(tab$Год), 3), # а подписи расставим через 3 года tck = 0) # но рисовать метки не будем # разметим ось Y через 1 млрд куб. м., округлив предварительно минимальное и максимальное значение до ближайшего целого снизу и сверху соответственно axis(side = 2, at = seq(floor(min(tab$Каспийское)), ceiling(max(tab$Каспийское)), 1), tck = -0.02) box() # добавим рамку для красоты Для размещения сетки координат существует функция grid(nx = NULL, ny = nx, col = &quot;lightgray&quot;, lty = &quot;dotted&quot;, lwd = par(&quot;lwd&quot;), equilogs = TRUE). Как видно из набора ее параметров, сетка определяется количеством линий в горизонтальном и вертикальном направлении. Это не всегда бывает удобно, поскольку как правило мы хотим задать шаг сетки конкретной величины. По умолчанию, однако, линии сетки выбираются автоматически, как и метки: plot(tab$Год, tab$Каспийское, type = &quot;l&quot;, col = &quot;red&quot;) grid() Вы, разумеется, можете поменять их количество, однако R не будет за вас согласовывать шаг сетки и шаг меток осей, поскольку метки генерируются на стадии рисования plot() или axis() и не запоминаются. plot(tab$Год, tab$Каспийское, type = &quot;l&quot;, col = &quot;red&quot;) grid(10, 5) Функция grid() на самом деле является оберткой функции abline(), которая позволяет рисовать произвольные линии на графике. Данна функция предоставляет следующие возможности построения линий и серий линий: a, b — коэффициенты уравнения \\(y = ax + b\\). Таким образом можно определить только одну линию. coef — принимает вектор из двух значений, которые интерпретируются как a и b. То есть, это альтернативная форма записи предыдущего случая. h — значение (значения) координат \\(y\\) для горизонтальной линии (серии горизонтальных линий). То есть, вы можете передать в этот параметр как одиночное значение, так и вектор значений. В зависимости это этого нарисуется одна горизонтальная линия или серия горизонтальных линий. v — значение (значения) координат \\(x\\) для вертикальной линии (серии веритикальных линий). Работает аналогично параметру h. reg — сюда можно передать объект, обладающий методом coef(). Этот способ можно использовать для рисования линий регрессии. Предположим теперь, что вы хотите нарисовать сетку с шагом в 1 год по горизонтальной оси и шагом 1 млрд. куб. м по оси вертикальной. При этом вы также хотите, чтобы линии сетки располагались под графиком, а не поверх его. Также необходимо выделить особым цветом значение в 10 млрд м\\(^3\\) по оси \\(Y\\). Для этого выполним следующую последовательность действий: plot(tab$Год, tab$Каспийское, type=&quot;n&quot;) # режим &#39;n&#39; позволяет ничего не рисовать, но заложить поле графика в соответствии с данными, указанными в параметрах x и y # Вычисляем линии сетки xlines &lt;- seq(min(tab$Год), max(tab$Год), 1) ylines &lt;- seq(ceiling(min(tab$Каспийское)), floor(max(tab$Каспийское)), 1) # Рисуем линии сетки abline(h = ylines, v = xlines, col = &quot;lightgray&quot;) # Рисуем график lines(tab$Год, tab$Каспийское, col=&quot;red3&quot;) points(tab$Год, tab$Каспийское, pch = 20, col=&quot;red3&quot;) # Выделяем значение 10 по оси Y: abline(h = 10, col = &quot;blue&quot;, lwd = 2) # Рисуем дополнительно рамку, т.к. сетку координат мы рисовали после графика box() 4.6.3 Аннотации данных (текст на графике) Аннотации данных добавляются на график с помощью функции text(). В качестве трех обязательных аргументов ей необходимо передать координаты точек размещения текста, и вектор подписей. Также полезным будет указать параметр pos=, отвечающий за размещение аннотации относительно точки. Значения pos, равные 1, 2, 3 и 4, соответствуют размещению снизу, слева, сверху и справа от точки: text(tab$Год, tab$Каспийское, labels = tab$Каспийское, cex = 0.75, pos = 3) К сожалению, стандартный механизм размещения аннотаций пакета graphics не обладает возможностью устранения конфликтов подписей. Однако это возможно для графиков, построенных с помощью библиотек lattice и ggplot2. Для этого можно воспользоваться пакетом directlabels или ggrepel. 4.7 Легенда Легенда к графику размещается с помощью функции legend(). Эта функция принимает несколько аргументов, включая: местоположение, заголовок, названия элементов, графические параметры. Местоположение может быть задано координатами \\((x,y)\\) в системе координат графика, но удобнее пользоваться следующими предопределенными константами: &quot;bottomright&quot;, &quot;bottom&quot;, &quot;bottomleft&quot;, &quot;left&quot;, &quot;topleft&quot;, &quot;top&quot;, &quot;topright&quot;, &quot;right&quot;, &quot;center&quot;. Чтобы в легенде появились точки, необходимо задать параметр pch=. Для линейной легенды, следует задать, соответственно, параметр lty = и/или lwd =. Каждый из этих параметров должен быть вектором по количеству элементов легенды: par(mar = margins.default) # Найдем ограничивающий прямоугольник вокруг всех рядов данных xrange = range(tab$Год) yrange = range(tab$Каспийское, tab$Карское, tab$Азовское) # Построим пустой график с разметкой осей и всеми заголовками plot(xrange, yrange, type=&quot;n&quot;, main=&quot;Объем сброса загрязненных сточных вод&quot;, xlab=&quot;Год&quot;, ylab=&quot;млрд.куб.м&quot;, cex.axis=0.8, cex.lab=0.7, cex.main=0.9, col.lab = &quot;grey50&quot;, fg = &quot;grey40&quot;) # Добавим на график сетку координат grid() # Добавим на график данные points(tab$Год, tab$Каспийское, pch=20, col=&quot;red3&quot;) lines(tab$Год, tab$Каспийское, pch=20, col=&quot;red3&quot;) points(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) lines(tab$Год, tab$Карское, pch=20, col=&quot;forestgreen&quot;) points(tab$Год, tab$Азовское, pch=20, col=&quot;steelblue&quot;) lines(tab$Год, tab$Азовское, pch=20, col=&quot;steelblue&quot;) # Определим положение, названия и цвета: main &lt;- &quot;Море&quot; location &lt;- &quot;topright&quot; labels &lt;- c(&quot;Каспийское&quot;, &quot;Карское&quot;, &quot;Азовское&quot;) colors &lt;- c(&quot;red3&quot;, &quot;forestgreen&quot;, &quot;steelblue&quot;) # Если цвет передать в параметр fill, то по умолчанию # нарисуются цветовые плашки: legend(location, labels, title = main, fill=colors) pts &lt;- c(20, 20, 20) # каждый элемент показывается точкой типа 20 lns &lt;- c(1, 1, 1) # каждый элемент показывается линией толщиной 1 # теперь посмотрим на легенду (она нарисуется поверх старой) legend(location, labels, title = main, col = colors, pch = pts, lwd = lns) Более подробно с разнообразными опциями размещения легенды на графике вы можете познакомиться, набрав в консоли команду ?legend. 4.8 Контрольные вопросы и задачи 4.8.1 Вопросы Какая функция базового пакета R отвечает за построение стандартных графиков (диаграмм рассеяния, линейных)? Какие функции стандартной библиотеки R позволяют построить: столбчатые диаграммы, круговые секторные диграммы, гистограммы? Как задать интервал или количество интервалов гистограммы? Можно ли разместить столбчатую диаграмму горизонтально? Если да, то как? Какая функция отвечает за установку параметров графической подсистемы? Как установить поля вокруг графиков? Как развернуть подписи на столбчатой диаграмме перпендикулярно оси? Как установить запрет на экспоненциальное представление больших чисел при рисовании графиков? Какой параметр отвечает за установку цвета в функциях построения графиков стандартной библиотеки R? Какие параметры отвечают за установку толщины и типа линии на графиках? Какие параметры отвечают за установку размера и типа значка на диаграммах рассеяния? Как совместить несколько графиков на одной сетке координат? Какая функция рисует рамку вокруг графика? Какая функция отвечат за рисование сетки координат? Как установить равный масштаб по осям графика? Какие параметры позволяют масштабировать текст элементов графика, таких как подписи координат, осей, заголовков и подзаголовков? Назовите способы задания цвета в R. Как сделать цвет в R полупрозрачным? Назовите стандартные цветовые палитры R. Как сгенерировать последовательность из нужного количества цветов между заданными опорными цветами? Какая функция повзоляет разместить легенду на графике? Как сделать так, чтобы в легенде показывались точки? Линии? Цветовые плашки? 4.8.2 Задачи Самсонов Т.Е. Визуализация и анализ географических данных на языке R. М.: Географический факультет МГУ, 2017. DOI: 10.5281/zenodo.901911 "],
["controls.html", "Глава 5 Управление выполнением и векторизованные вычисления 5.1 Циклы 5.2 Условия 5.3 Функции 5.4 Векторизованые вычисления 5.5 Контрольные вопросы и задачи", " Глава 5 Управление выполнением и векторизованные вычисления Программный код главы Данный модуль посвящен введению в работу с управлением выполнением команд в R, а также методами их пакетного выполнения в виде векторизованных вычислений. Мы рассмотрим такие полезные конструкции как циклы, условия, функции, функции семейства apply. Вместе они представляют собой мощное средство для организации сложных технологических схем обработки данных, требующих повторения идентичных операций над каждым элементом множества входных данных, ветвления алгоритма в зависимости от значений переменных, а также структурирования программного кода на автономные блоки команд, выполняющие специфичный набор операций. Мы рассмотрим управление командами на примере построения графиков. 5.1 Циклы Цикл — это разновидность управляющей конструкции, предназначенная для организации многократного исполнения набора инструкций. В R циклы наиболее часто используются для пакетной обработки данных, ввода и вывода. Типичными примерами использования циклов являются чтение множества файлов входных данных, а также построение серий графиков и карт одного типа по различным данным. При этом обработка множества строк таблиц в R обычно организуется не средствами циклов, а средствами функций семейства lapply, о которых мы поговорим отдельно. В R, как и во многих других языках программирования, существует несколько вариантов циклов. Первый вид циклов — это конструкция for с синтаксисом for (x in X) statement. Она означает, что: переменная x должна пробежать по всем элементам последовательности X. В качестве последовательности может выступать любой вектор или список. каждый раз, когда x будет присвоено значение очередного элемента из X, будет выполнено выражение statement, которое называют телом цикла. Соответственно, цикл выполнится столько раз, сколько элементов содержится в последовательности X. Выполнение тела цикла на каждом проходе называют итерацией. Например, с помощью цикла можно вывести на экран числа от 1 до 10, по одному с каждой строки: ## ЦИКЛЫ for (i in 1:10) print(i) ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 Если тело цикла содержит более одной инструкции R, оно должно быть заключено в фигурные скобки, иначе выполнится только первое выражение, а оставшиеся будут запущены один раз после выхода из цикла: for (i in 1:10) { a &lt;- factorial(i) # факториал i b &lt;- exp(i) # e в степени i print(a/b) # факториал растет быстрее экспоненты } ## [1] 0.3678794 ## [1] 0.2706706 ## [1] 0.2987224 ## [1] 0.4395753 ## [1] 0.8085536 ## [1] 1.784702 ## [1] 4.595885 ## [1] 13.52585 ## [1] 44.78295 ## [1] 164.7473 Другой вариант цикла организуется с помощью конструкции while, имеющей синтаксис while (condition) statement. Такая конструкция означает, что тело цикла будет выполняться, пока значение выражения condition (условия) равно TRUE. Как правило, в теле цикла обновляется некоторая переменная, которая участвует в проверке условия, и предполагается, что рано или поздно оно станет равным FALSE, что приведет к выходу из цикла. Например, вышеприведенный цикл, печатающий числа от 1 до 10, можно переписать на while следуюшим образом: i &lt;- 0 while(i &lt; 10) { i &lt;- i+1 print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 Обратите внимание на то, что мы внутри цикла обновляем значение переменной i. Увеличение значения переменной цикла называется инкрементом, а уменьшение — декрементом Одной из самых распространенных ошибок программистов (особенно начинающих, но и професионалы ее не избегают) является забытая инструкция инкремента (или деккремента) переменной цикла, в результате чего цикл становится бесконечным. В этом плане конструкция for более надежна. Перейдем теперь от искусственных примеров к реальной практике. В качестве исходных данных используем знакомую нам таблицу Росстата по доходам и расходам граждан: library(openxlsx) # Чтение данных tab &lt;- read.xlsx(&quot;IncomeConsumption.xlsx&quot;, 1) filter &lt;- grep(&quot;федеральный округ&quot;, tab$Регион) okr &lt;- tab[filter, ] names &lt;- sub(&quot;федеральный округ&quot;, &quot;&quot;, okr$Регион) filter&lt;-grepl(&quot;федеральный округ|Федерация|числе&quot;, tab$Регион) sub &lt;- tab[!filter, ] Например, посмотрим как можно построить столбчатые диаграммы по каждому столбцу таблицы okr: # Пакетное рисование графиков for(var in colnames(okr)[-1]) { par(mar = c(5,9,4,2)) barplot(okr[,var], names.arg = names, horiz = TRUE, las = 1, main = var, col = &quot;steelblue&quot;) } А теперь усложним тело цикла, добавив рисование гистограммы распределения по тому же показателю, но взятому из таблицы sub: # Пакетное рисование графиков par(mfrow = c(1,2)) options(scipen = 999) # запрещаем использовать экспоненциальную форму записи больших чисел for(var in colnames(okr)[-1]) { par(mar = c(5,9,4,3)) # устанавливаем поля для столбчатой диаграммы barplot(okr[,var], names.arg = names, horiz = TRUE, las = 1, main = var, xlab = &quot;По федеральным округам&quot;, col = &quot;steelblue&quot;) par(mar = c(5,3,4,1)) # устанавливаем поля для гистограммы hist(sub[,var], breaks = 12, col=&quot;green&quot;, main = var, xlab = &quot;По субъектам&quot;) } 5.2 Условия Проверка условий позволяет осуществлять так называемое ветвление в программе. Ветвление означает, что при определенных условиях (значениях переменных) будет выполнен один программный код, а при других условиях — другой. В R для проверки условий используется условный оператор if — else if — else следующего вида: if (condition) { statement1 } else if (condition) { statement2 } else { statement3 } Сначала проверяется условие в выражении if (condition), и если оно истинно, то выполнится вложенный в фигурные скобки программный код statement1, после чего оставшиеся условия не будут проверяться. Если первое условие ложно, программа перейдет к проверке следующего условия else if (condition). Далее, если оно истинно, то выполнится вложенный код statement2, если нет — проверка переключится на следующее условие и так далее. Заключительный код statement3, следующий за словом else, выполнится только если ложными окажутся все предыдущие условия. Конструкций else if может быть произвольное количество, конструкции if и else могут встречаться в условном операторе только один раз, в начале и конце соответственно. При этом условный оператор может состоять только из конструкции if, а else if и else не являются обязательными. Например, используя вышеприведенный код с вычислением экспоненты и факториала, можно вывести на экран информацию о том, больше ли экспонента чем факториал на данной итерации цикла: ## УСЛОВИЯ for (i in 1:10){ a &lt;- factorial(i) # факториал i b &lt;- exp(i) # e в степени i ratio &lt;- a/b # вычисляем отношение экспоненты и факториала if (ratio &lt; 1){ # если экспонента больше, то... cat(i,&#39;! &lt; exp(&#39;, i, &#39;)\\n&#39;, sep = &#39;&#39;) } else { # в противном случае cat(i,&#39;! &gt; exp(&#39;, i, &#39;)\\n&#39;, sep = &#39;&#39;) } } ## 1! &lt; exp(1) ## 2! &lt; exp(2) ## 3! &lt; exp(3) ## 4! &lt; exp(4) ## 5! &lt; exp(5) ## 6! &gt; exp(6) ## 7! &gt; exp(7) ## 8! &gt; exp(8) ## 9! &gt; exp(9) ## 10! &gt; exp(10) Теперь рассмотрим более практическую задачу. В нашем распоряжении имеются данные по среднеклиматическим (за последние 50 лет) температурам на территории юга Европейской части России с разрешением \\(30&#39;&#39;\\) (около 1 км), полученные с портала WorldClim. Необходимо построить гистограммы распределения температур по месяцам года, раскрасив их в различные цвета соответственно среднему значению температуры: Если средняя температура ниже \\(0^\\circ C\\), то цвет гистограммы синий Если средняя температура от \\(0^\\circ C\\) до \\(10^\\circ C\\), то цвет гистограммы желтый Если средняя температура выше \\(10^\\circ C\\), то цвет гистограммы оранжевый # ПАКЕТНОЕ ЧТЕНИЕ ДАННЫХ library(foreign) # для чтения dbf необходима библиотека foreign files &lt;- list.files(&quot;dbf&quot;) # прочитаем список файлов в директории dbf files &lt;- files[grep(&quot;.dbf&quot;, files, fixed = TRUE)] # отфильтруем файлы с расширением .dbf names &lt;- sub(&quot;.dbf&quot;,&quot;&quot;,files) # получим названия месяцев, избавившись от расширений i &lt;- 1 # Создадим дополнительно переменную цикла, чтобы выбирать i-е название месяца for (file in files){ # пройдемся по всем файлам temp &lt;- read.dbf(paste(&quot;dbf/&quot;, file, sep=&#39;&#39;)) # прочитаем текущий файл tmean &lt;- mean(temp$Temp) # вычислим среднюю температуру из столбца Temp hist.col &lt;- &quot;white&quot; # иницилизируем переменную цвета за пределами условия # Проверим наше условие if (tmean &lt; 0){ hist.col &lt;- &quot;steelblue&quot; } else if (tmean &lt; 10){ hist.col &lt;- &quot;yellow&quot; } else { hist.col &lt;- &quot;orange&quot; } # Построим гистограмму hist(temp$Temp, col = hist.col, main = names[i]) # Вот здесь нам нужна дополнительная переменная цикла # Нанесем линию среднего значения abline(v = tmean, lwd = 2, col = &quot;red&quot;) # Подпишем среднюю температуру text(tmean, 1000, labels = round(tmean,1), pos = 4, col = &quot;red&quot;) i &lt;- i + 1 # Не забудем сделать инкремент переменной цикла } 5.3 Функции Функции в R можно использовать для структурирования кода на логически завершенные, автономные фрагменты кода, каждый из которых выполняет конкретную задачу. Чем сильнее разрастается ваш программный код, тем больше проявляется потребность в наличии функций. Функции позволяют использовать один и тот же код в разных местах программы, не повторяя его. Синтаксис функции выглядит следующим образом: functionName &lt;- function(parameter1, parameter2, ...){ ... return(result) } Функция создается c помощью ключевого слова function, за которым в круглых скобках заключается произвольное количество параметров (столько, сколько вам нужно: от нуля и более). С помощью этих параметров вы сможете передавать внутрь функции значения переменных. Созданной функции необходимо дать имя, используя оператор присвоения &lt;-. После того как выполнится код внутри функции, результат можно вернуть, используя ключевого слово return. R не поддерживает возврат множественных результатов. Если вам необходимо вернуть несколько объектов (переменных, векторов, таблиц и т.д.), создайте список (list), включите в него все возвращаемые объекты и верните из функции этот список. В вышеприведенном примере мы использовали проверку условия для того чтобы вычислить рекомендуемый цвет гистограммы. С одной стороны, это некая вспомогательная процедура, не имеющая непосредственного отношения к построению гистограммы. С другой стороны, это полезная процедура, которой мы захотим воспользоваться в дальнейшем — всегда приятно, когда программа тебе с выбором стилей оформления данных2. Оформим выбор цвета в виде функции, которая принимает в каестве параметра число (температуру), а возвращает название цвета. ## ФУНКЦИИ # Создадим функцию, возвращающую цвет в зависимости от температуры selectColor &lt;- function(value) { hist.col &lt;- &quot;white&quot; if (tmean &lt; 0){ hist.col &lt;- &quot;steelblue&quot; } else if (tmean &lt; 10){ hist.col &lt;- &quot;yellow&quot; } else { hist.col &lt;- &quot;orange&quot; } return(hist.col) } i &lt;- 1 par(mfrow = c(2,2)) for (file in files) { temp &lt;- read.dbf(file) tmean &lt;- mean(temp$Temp) # выберем цвет с помощью нашей функции hist.col &lt;- selectColor(tmean) # построим гистограмму hist(temp$Temp, col = hist.col, main = names[i]) # добавим линию среднего abline(v = tmean, lwd = 2, col = &quot;red&quot;) # подпишем среднее text(tmean, 1000, labels = round(tmean,1), pos = 4, col = &quot;red&quot;) i &lt;- i+1 } Усложним задачу, чтобы показать, как работать с несколькими аргументами функции. Например, мы хотим не одноцветные диаграммы, а чтобы цвет менялся плавным градиентом от первого столбика гистограммы до последнего. Соответственно, количество возвращаемых цветов должно быть равно количеству столбиков в гистограмме. Нашей функции не важно, столбики это или нет, но ей надо знать, сколько цветов надо вернуть. Для этого добавим в нее второй параметр ncolors. Это позволит пользователю при желании не задвать этот параметр, если необходим только один цвет. # ГИСТОГРАММЫ С ГРАДИЕНТОМ selectColor2 &lt;- function(value, ncolors){ # передаем в качестве дополнительного параметра количество цветов hist.col &lt;- &quot;white&quot; # генерируем ncolors цветов из соответствующей палитры if (tmean &lt; 0){ hist.col &lt;- colorRampPalette(c(&quot;darkslateblue&quot;, &quot;steelblue1&quot;))(ncolors) } else if (tmean &lt; 10){ hist.col &lt;- colorRampPalette(c(&quot;steelblue1&quot;, &quot;yellow&quot;))(ncolors) } else { hist.col &lt;- colorRampPalette(c(&quot;yellow&quot;, &quot;red&quot;))(ncolors) } return(hist.col) } i &lt;- 1 par(mfrow = c(2,2)) ncells &lt;- 25 # установим фиксированное количество столбцов гистограммы for (file in files){ temp &lt;- read.dbf(file) tmean &lt;- mean(temp$Temp) # получим для раскраски требуемое количество цветов hist.col &lt;- selectColor2(tmean, ncells) # построим гистограмму hist(temp$Temp, col = hist.col, main = names[i], breaks = ncells) # добавим линию среднего abline(v = tmean, lwd = 2, col = &quot;red&quot;) # подпишем среднее text(tmean, 1000, labels = round(tmean,1), pos = 4, col = &quot;red&quot;) i &lt;- i+1 } 5.4 Векторизованые вычисления Данные (в том числе географические) практически всегда носят множественный характер и организованы в определенные структуры (см. главу 2). Эта особенность данных выдвигает логичное желание иметь процедуры, которые можно применять к полному набору данных, а не к его отдельным компонентам. Это и есть процедуры векторизованных высчислений. Предположим, вам необходимо что-то вычислить для каждой строки таблицы, при этом порядок вычисления зависит от содержимого ячеек данной строки. Вы можете организовать подобные вычисления с помощью циклов, однако в R существуют специальные функции семейста apply, которые позволяют решать подобные задачи более элегантно и с высокой скоростью. Это достигается за счет того, что функции apply написаны на языке C (как и многие другие функции R), в то время как при организации цикла ваши данные будут обрабатываться стандартными средствами языка. Функция Назначение apply() применить функцию ко всем строкам или столбцам матрицы lapply() применить функцию к каждому компоненту вектора или списка и получить результат также в виде списка (l — list) sapply() применить функцию к каждому компоненту вектора или списка и получить результат в виде вектора (s — simplify) vapply() аналогична vapply, но требует явного задания типа данных возвращаемого вектора, за счет чего работает быстрее (v — velocity) mapply() применить функцию к каждому компоненту нескольких векторов или списков и вернуть результат в виде списка (m — multivariate) rapply() применить функцию рекурсивно ко всем элементам переданного списка и вернуть результат в аналогичной структур (r — recursive) tapply() применить функцию ко всем компонентам вектора или списка, сгруппировав их по значению переданного фактора Функции семейства apply, принимающие на вход списки, могут работать и с фреймами данных. В этом случае фрейм внутри функции будет преобразован с помощью функции as.list() в список, элементами которого являются столбцы (переменные) входного фрейма данных. Данные при этом не потеряются, их типы тоже не изменятся. Базовая функция apply() имеет следующие аргументы: X — массив любой размерности (включая вектор) MARGIN — измерения по которым необходимо вести вычисления. Для матрицы 1 означает строку, 2 означает столбец, c(1, 2) будет означать, что вычисления производятся по всем комбинациям строк и столбцов FUN — функция, которая будет применяться к каждому элементу указанных измерений Рассмотрим, как можно вычислять значения по строкам. У нас есть подготовленная таблица Росстата Выбросы в атмосферу загрязняющих веществ, отходящих от стационарных источников, по видам экономической деятельности. Рассчитаем, какой тип источника занимает максимальное и минимальное место среди газообразных и жидких. Обратите внимание, что в первом случае используется заранее созданнаф функция, а во втором мы определяем анонимную функцию непосредственно при вызове apply(): ## ВЕКТОРИЗОВАННЫЕ ВЫЧИСЛЕНИЯ library(dplyr) ## Warning: пакет &#39;dplyr&#39; был собран под R версии 3.4.2 ## ## Присоединяю пакет: &#39;dplyr&#39; ## Следующие объекты скрыты от &#39;package:stats&#39;: ## ## filter, lag ## Следующие объекты скрыты от &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union df &lt;- read.csv2(&quot;atm_emissions.csv&quot;) head(df) ## YEAR TOTAL SOLID FLGAS SO NO CO CH ORG ## 1 1992 28207.6 5609.1 22598.5 8171.3 2718.1 6813.0 2583.9 1608.9 ## 2 1993 24788.3 4746.1 20042.2 7217.9 2462.0 5894.0 2386.7 1604.8 ## 3 1994 21929.1 3870.2 18058.9 6512.5 2085.2 5140.8 2609.3 1238.0 ## 4 1995 21269.6 3600.4 17669.2 6424.8 1996.6 5005.6 2735.7 1110.9 ## 5 1996 20274.1 3233.4 17040.8 6156.7 1920.4 4876.6 2531.3 1161.8 ## 6 1997 19332.9 3041.8 16291.1 5991.1 1799.7 4653.0 2554.2 989.9 find.max &lt;- function(x) { return(names(x)[which.max(x)]) } df$MAXSRC &lt;- apply(df[5:9], 1, find.max) df$MINSRC &lt;- apply(df[5:9], 1, function(x) names(x)[which.min(x)]) print(df) ## YEAR TOTAL SOLID FLGAS SO NO CO CH ORG MAXSRC ## 1 1992 28207.6 5609.1 22598.5 8171.3 2718.1 6813.0 2583.9 1608.9 SO ## 2 1993 24788.3 4746.1 20042.2 7217.9 2462.0 5894.0 2386.7 1604.8 SO ## 3 1994 21929.1 3870.2 18058.9 6512.5 2085.2 5140.8 2609.3 1238.0 SO ## 4 1995 21269.6 3600.4 17669.2 6424.8 1996.6 5005.6 2735.7 1110.9 SO ## 5 1996 20274.1 3233.4 17040.8 6156.7 1920.4 4876.6 2531.3 1161.8 SO ## 6 1997 19332.9 3041.8 16291.1 5991.1 1799.7 4653.0 2554.2 989.9 SO ## 7 1998 18661.8 2864.4 15797.4 5679.3 1753.3 4562.9 2571.6 921.9 SO ## 8 1999 18539.7 2768.4 15771.2 5505.5 1716.4 4663.9 2767.7 831.0 SO ## 9 2000 18819.8 2972.2 15847.6 5407.1 1698.4 4997.9 2685.4 850.4 SO ## 10 2001 19123.6 2973.2 16150.4 5254.0 1678.9 5148.1 2723.6 1130.8 SO ## 11 2002 19481.2 2882.8 16598.4 4987.4 1646.2 5857.5 2733.2 1164.8 CO ## 12 2003 19829.4 2868.0 16961.4 4959.6 1661.8 5929.4 2834.1 1356.5 CO ## 13 2004 20491.3 2855.7 17635.6 4768.4 1628.9 6774.4 2786.8 1448.2 CO ## 14 2005 20425.4 2802.0 17623.3 4675.0 1666.8 6521.2 2868.1 1650.6 CO ## 15 2006 20568.4 2842.8 17725.6 4764.7 1703.1 6338.3 2815.0 1863.1 CO ## 16 2007 20636.9 2743.4 17893.5 4573.1 1732.8 6448.4 2992.4 1908.6 CO ## 17 2008 20103.3 2704.2 17399.0 4534.1 1816.6 6091.5 3217.5 1532.0 CO ## 18 2009 19021.2 2341.1 16680.1 4370.6 1730.5 5500.5 3347.3 1546.0 CO ## 19 2010 19115.6 2381.2 16734.4 4385.3 1855.2 5565.1 3135.9 1605.3 CO ## 20 2011 19162.3 2283.1 16879.2 4342.7 1880.0 5753.5 3105.8 1622.8 CO ## 21 2012 19630.3 2249.4 17380.9 4340.9 1937.5 6001.8 3293.3 1638.2 CO ## 22 2013 18446.5 2008.5 16438.0 4173.3 1874.2 5350.9 3424.8 1455.8 CO ## 23 2014 17451.9 1922.2 15529.7 4036.3 1805.5 4938.4 3251.0 1340.0 CO ## 24 2015 17295.7 1820.4 15475.3 4099.4 1787.4 4799.6 3323.0 1294.5 CO ## 25 2016 17349.3 1723.9 15625.4 4011.4 1830.1 4907.1 3406.1 1304.6 CO ## MINSRC ## 1 ORG ## 2 ORG ## 3 ORG ## 4 ORG ## 5 ORG ## 6 ORG ## 7 ORG ## 8 ORG ## 9 ORG ## 10 ORG ## 11 ORG ## 12 ORG ## 13 ORG ## 14 ORG ## 15 NO ## 16 NO ## 17 ORG ## 18 ORG ## 19 ORG ## 20 ORG ## 21 ORG ## 22 ORG ## 23 ORG ## 24 ORG ## 25 ORG Другие функции семейства apply в приложении к фреймам данных будут работать со столбцами (переменными), интерпретируя их как элементы списка. Наиболее часто из них используются lapply(), sapply() и vapply().В отличие от apply(), они уже не принимаеют номера измерений и работают только с элементами переданного списка. Например, мы можем посчитать среднее значение экономического показателя по каждой переменной в таблице округов. Поскольку функция среднего уже есть в составе базовых средств R, достаточно указать ее при вызове sapply(): sapply(okr, mean) ## Warning in mean.default(X[[i]], ...): аргумент не является числовым или ## логическим: возвращаю NA ## Регион Площадь Население Трудящиеся Доход ## NA 2137.287 17958.362 8487.625 25077.125 ## Расходы Зарплата ВРП Активы ## 18338.375 28976.375 6239994.875 16690191.375 В данном случае для первого столбца было возвращено значение NA, что логично, поскольку он имеет строковый тип. В качестве альтернативы функциям apply можно также воспользоваться вычислениями посредством функций семейства map из пакета purrr (еще один пакет из tidyverse). Эти функции работают аналогично lapply() и поддерживают последовательности с помощью пайп-оператора: map() возвращает список. map_lgl() возвращает вектор логических значений. map_int() возвращает вектор целочисленных значений. map_dbl() возвращает вектор чисел с плавающей точкой. map_chr() возвращает вектор строк. Например, предыдущая задача с помощью purrr решались бы так: library(purrr) ## Warning: пакет &#39;purrr&#39; был собран под R версии 3.4.2 map_dbl(okr, mean) ## Warning in mean.default(.x[[i]], ...): аргумент не является числовым или ## логическим: возвращаю NA ## Регион Площадь Население Трудящиеся Доход ## NA 2137.287 17958.362 8487.625 25077.125 ## Расходы Зарплата ВРП Активы ## 18338.375 28976.375 6239994.875 16690191.375 5.5 Контрольные вопросы и задачи Что такое цикл и для каких сценариев обработки данных могут быть полезны циклы? Перечислите несколько способов организации циклов в R, необходимые ключевые слова и параметры. Что такое инкремент и декремент? Какое ключевое слово позволяет прервать цикл и выйти из него принудительно? Какое ключевое слово позволяет прекратить текущую итерацию цикла и перейти сразу к новой итерации? Являются ли необходимыми фигурные скобки в случае когда цикл или условный оператор содержит только одно выражение? Что говорит об этом стиль программирования на R? Что такое условный оператор и для каких сценариев обработки данных необходимы условные операторы? Перечислите ключевые слова, которые могут быть использованы для организации условных операторов Что такое функция и для каких сценариев обработки данных могут быть полезны функции? Может ли функция возвращать более одного значения? Что необходимо сделать, чтобы реализовать такую возможность? Что такое векторизованные вычисления? Перечислите функции семейства apply и задачи, которые они позволяют решить. Какая функция семейства apply позволяет выполнять вычисления не только по столбцам, но и по строкам? Можно ли передавать в функции семейства apply фреймы данных? Если да, то как интерпретируются такие данные? Какой пакет R позволяет выполнять векторизованные вычисления в более простой и быстрой форме, чем функции семейства apply? Можно ли с помощью него выполнять вычисления по строкам? 5.5.1 Вопросы 5.5.2 Задачи Самсонов Т.Е. Визуализация и анализ географических данных на языке R. М.: Географический факультет МГУ, 2017. DOI: 10.5281/zenodo.901911 в картографии это называется “smart mapping”, что переводят как “умное картографирование”, хотя это и не самый удачный вариант перевода↩ "],
["spatial-data.html", "Глава 6 Пространственные данные 6.1 Модели пространственных данных 6.2 Пространственная привязка 6.3 Векторные данные 6.4 Растровые данные 6.5 Контрольные вопросы и задачи", " Глава 6 Пространственные данные Необходимые пакеты: sf, raster, dplyr, RColorBrewer Данный модуль посвящен введению в работу с пространственными данными в R. Рассмотрены общие вопросы моделирования реального мира средствами моделей пространственных данных. Рассматривается чтение векторных и растровых данных, их визуализация стандартными средствами. 6.1 Модели пространственных данных Пространственные данные — это данные о пространственных объектах и их наборах. В свою очередь, пространственный объект определяется как цифровая модель материального или абстрактного объекта реального или виртуального мира с указанием его идентификатора, координатных и атрибутивных данных.3 Если говорить по сути, то пространственные данные можно определить как данные о географических объектах или явлениях, фиксирующие их местоположение и/или распределение в системе координат, привязанной к телу Земли или любого другого небесного тела. Таким образом, отличительной особенностью пространственных данных перед непространственными является координатное описание местоположения. Важно знать отличия между векторной и растровой моделью пространственных данных. Векторная модель пространственных данных включает описание координатных данных пространственных объектов и, возможно, топологических отношений между ними. Векторные данные фиксируют местоположение и форму объектов в виде геометрических примитивов, таких как точки, линии, полигоны, объемные тела. Выбор модели объекта (например, представить город точкой или полигоном) зависит от масштаба анализа и целей исследования. Векторная модель данных является объектно-ориентированной. Растровая модель описывает не объекты, а пространственное распределение некоторой (выбранной исследователем) характеристики. Пространство разбивается регулярной сеткой ячеек, в каждой ячейке фиксируется значение исследуемого параметра (путем статистического осреднения, семплирования в центре ячейки и т.п.). Растровые данные могут быть как количественными (например, поле температуры), так и качественными (например, растр классифицированного снимка, каждая ячейка которого фиксирует принадлежность к тому или иному типу объекта). Таким образом, растровая модель является пространственно-ориентированной (или феномен-ориентированной). Существуют и другие модели пространственных данных, однако их рассмотрение выходит за рамки настоящей лекции. В настоящей лекции мы познакомимся с чтением и визуализацией пространственных данных в векторном и растровом формате, а также рассмотрим вопросы связанные с использованием картографических проекций. 6.1.1 Векторные данные Simple Features (официально Simple Features Access) — это стандарт OGC 06-103, разработанный Open Geospatial Consortium (OGC) и реализованный также в виде международного стандарта ISO 19125, который определяет общую модель хранения и доступа к векторным объектам (точка, линия, многоугольник, мульти точечные, мультилинии и т. д.), в географических информационных системах. Геометрическое представление пространственных объектов базируется на следующих принципах: Все геометрии состоят из точек. Точки являются координатами в 2-, 3- или 4-мерном пространстве. Все точки в геометрии имеют одинаковую размерность. В дополнение к координатам \\(X\\) и \\(Y\\) имеются два дополнительных дополнительных параметра: координата \\(Z\\), обозначающая высоту координата \\(M\\), обозначающая некоторую меру, связанную с точкой, а не с признаком в целом (в этом случае это будет атрибут объекта). Измерение \\(M\\) может быть использовано, например, для представления времени или линейных координат (для маршрутов). Координаты простой геометрии всегда содержат компоненты \\(X\\) и \\(Y\\), поэтому все разнообразие возможных представлений определяется наличием или отсутствием дополнительных измерений \\(Z\\) и \\(M\\) Таким образом, получаем четыре варианта геометрии: двумерные точки \\(XY\\) трехмерные точки \\(XYZ\\) трехмерные точки \\(XYM\\) четырехмерные точки \\(XYZM\\) В случае использования широт и долгот \\(X\\) соответствует долготе, \\(Y\\) соответствует широте. Всего стандарт Simple Features включает в себя 17 типов геометрий. Из них наиболее употребительными являются следующие 7: Тип Описание POINT нуль-мерная геометрия, содержащая одну точку LINESTRING последовательность точек, соединенных прямыми, несамопересекающимися отрезками; одномерная геометрия POLYGON геометрия с положительной площадью (двумерная); последовательность точек, отрезки между которыми формируют замкнутое кольцо без самопересечений; первое кольцо является внешним, ноль и более остальных колец представляют дырки внетри полигона MULTIPOINT множество точек; геометрия типа MULTIPOINT называется простой если ни одна пара точек в MULTIPOINT не совпадает MULTILINESTRING множество линий MULTIPOLYGON множество полигонов GEOMETRYCOLLECTION множество геометрий произвольного типа за исключением GEOMETRYCOLLECTION Примеры различных видов геометрий представлены на рисунке ниже: ## Linking to GEOS 3.6.1, GDAL 2.1.3, proj.4 4.9.3 Оставшиеся виды геометрий Simple Features включают: CIRCULARSTRING, COMPOUNDCURVE, CURVEPOLYGON, MULTICURVE, MULTISURFACE, CURVE, SURFACE, POLYHEDRALSURFACE, TIN, TRIANGLE. Существует два официально закрепленных формата представления SF: Well-Known Text (WKT) и Well-Known Binary (WKB), которые необходимы для чтения таких данных человеком и машиной соответственно. Well-Known Text (WKT) — стандарт представления геометрии в виде множества списков координат, в которых координаты вершин разделены пробелами, вершины разделены запятыми, а компоненты полигонов и мультигеометрий заключены в круглые скобки и также разделены запятыми. Вышеприведенной картинке соответствуют следующие строки WKT: ## MULTIPOINT (3.2 4, 3 4.6, 3.8 4.4, 3.5 3.8, 3.4 3.6, 3.9 4.5) ## LINESTRING (0 3, 0 4, 1 5, 2 5) ## MULTILINESTRING ((0 3, 0 4, 1 5, 2 5), (0.2 3, 0.2 4, 1 4.8, 2 4.8), (0 4.4, 0.6 5)) ## POLYGON ((0 0, 1 0, 3 2, 2 4, 1 4, 0 0), (1 1, 1 2, 2 2, 1 1)) ## MULTIPOLYGON (((0 0, 1 0, 3 2, 2 4, 1 4, 0 0), (1 1, 1 2, 2 2, 1 1)), ((3 0, 4 0, 4 1, 3 1, 3 0), (3.3 0.3, 3.3 0.8, 3.8 0.8, 3.8 0.3, 3.3 0.3)), ((3 3, 4 2, 4 3, 3 3))) ## GEOMETRYCOLLECTION (MULTIPOINT (3.2 4, 3 4.6, 3.8 4.4, 3.5 3.8, 3.4 3.6, 3.9 4.5), MULTIPOLYGON (((0 0, 1 0, 3 2, 2 4, 1 4, 0 0), (1 1, 1 2, 2 2, 1 1)), ((3 0, 4 0, 4 1, 3 1, 3 0), (3.3 0.3, 3.3 0.8, 3.8 0.8, 3.8 0.3, 3.3 0.3)), ((3 3, 4 2, 4 3, 3 3))), LINESTRING (0 3, 0 4, 1 5, 2 5)) Well-Known Binary (WKB) — бинарный формат хранения координат. Именно этот формат фактически используется в базах данных, поскольку он обеспечивает высокую скорость чтения и записи данных (в отлиие от текстового). Однако внешний вид данных в формате WKB мало о чем говорит человеку, поскольку он предназначен для чтения компьютером. Например, вышеприведенная строка LINESTRING будет выглядеть так: ## 01 02 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 10 40 00 00 00 00 00 00 f0 3f 00 00 00 00 00 00 14 40 00 00 00 00 00 00 00 40 00 00 00 00 00 00 14 40 6.1.2 Растровые данные Растр представляет из себя матрицу значений. Каждой ячейке матрицы соответствует прямоугольная пространственная область фиксированного размера, которая называется пикселом. Различают растры непрерывные и категориальные (классифицированные). Также необходимо разделять одноканальные и многоканальные растры. Примером одноканального растра является цифровая модель рельфа. В виде многоканальных растров часто представляют космические снимки. В отличие от векторных данных, которые требут указания координат для каждой вершины, регулярно-ячеистый характер растровой модели позволяет вычислять координаты пикселов на основе их индексов. Поэтому фактически растровые данные хранятся в виде линейно упорядоченного списка значений (raster values) и описания геометрии растра (raster geometry). Геометрия растра определяет, где именно располагаются в пространстве пикселы растра и может быть описана путем указания следующих компонент4: Параметр Назначение NCOLS Количество столбцов NROWS Количество строк XLLCENTER Координата \\(X\\) центра левой нижней ячейки растра YLLCENTER Координата \\(Y\\) центра левой нижней ячейки растра CELLSIZE Размер ячейки Иногда вместо параметров XLLCENTER/YLLCENTER указываются XLLCORNER/YLLCORNER, которые кодируют координаты левого нижнего угла, а не центра левой нижней ячейки растра. Выбор одного из двух этих вариантов определяет тип регистрации растра, а их значения указывают, в какое именно место необходимо “посадить” растр, чтобы его ячейки заняли соответствующие им области в системе координат. Если геометрия растра характеризуется анизотропией, то вместо одного значения CELLSIZE могут быть указаны разные размеры ячеек по осям координат CELLSIZEX и CELLSIZEY. В отличие от векторной модели, которая позволяет хранить данные только о нужных географических локациях, растровая модель такой свободы не предоставляет. Матрица ячеек растра всегда покрывает область данных целиком, и за простоту растровой структуры приходится расплачиваться ее неэкономичностью. Поскольку часто данные имеются не на всю территорию, возникает необходимость кодирования ячеек, для которых данные не известны, специальным числом (назовем его условно NODATA_VALUE). Значение этого числа хранится в метаданных растра и позволяет интерпретировать соответствующие ячейки как пустые. Координаты точек векторных объектов и координаты пикселов растра, вычисленные в соответствии с описанием его геометрии, не имеют содержательного смысла, покуда не известно, в какой системе координат они заданы. Эта информация берется из описания пространственной привязки данных. 6.2 Пространственная привязка 6.2.1 Компоненты пространственной привязки Пространственная привязка (spatial reference или georeference) — важнейшая составляющая пространственных данных, которая говорит нам о том, как правильно интерпретировать координаты объектов. Пространственная привязка в простейшем случае включает несколько фундаментальных компонент: Эллипсоид вращения — тело, по отношению к которому вычисляются геодезические координаты точек (широты и долготы) Исходные геодезические даты (датум) — параметры положения эллипсоида в теле Земли Географическая система координат — включает датум, положение начального меридиана и единицы измерения широт и долгот Проекция — математический спопоб перехода от географических координат на эллипсоиде к плоским прямоугольным координатам карты. Плоская прямоугольная система координат — включает проекцию, ее параметры и единицы измерения координат. Если точки имеют также координаты \\(Z\\), то для их правильной интерпретации необходимы дополнительные компоненты пространственной привязки: Система счета высот (геодезические, нормальные, ортометрические) - определяют содержательный смысл и порядок вычисления высот и глубин (координата Z) Модель геоида, квазигеоида или эллипсоида — определяет поверхность, относительно которой вычисляются высоты точек. Вертикальная система координат — фактическая реализация системы счета высот относительно конкретной поверхности относимости с заданным положением нулевого уровня. Например, в России это Балтийская система нормальных высот с нулем в г. Кронштадт. Аналогичным образом требуется введение системы счета дополнительных координат \\(M\\), если они используются в представлении координат. 6.2.2 Форматы описания пространственной привязки Существует три распространенных способа задания (хранения) пространственной привязки: PROJ.4 String — представление в виде строки. WKT (Well-Known Text) — представление в виде иерархического списка. EPSG (European Petroleum Survey Group) — представление в виде числового кода. Для поиска проекций в перечисленных форматах представления удобно воспользоваться порталом spatialreference.org. PROJ.4 String — строковый формат представления информации о пространственной привязки, используемый в библиотеке PROJ.4. Данная библиотека лежит в основе координатных систем пространственных данных, используется в R, Python, QGIS и прочих средах. Основные параметры строки: +datum Datum name (see `proj -ld`) +ellps Ellipsoid name (see `proj -le`) +lat_0 Latitude of origin +lat_1 Latitude of first standard parallel +lat_2 Latitude of second standard parallel +lat_ts Latitude of true scale +lon_0 Central meridian +proj Projection name (see `proj -l`) +units meters, US survey feet, etc. +vunits vertical units. +x_0 False easting +y_0 False northing +zone UTM zone Примеры записи координат в формате PROJ.4: Географические координаты в WGS84 (без проекции): ## +proj=longlat +datum=WGS84 +no_defs Координаты в проекции Web Mercator (проекция Google Maps, Яндекс.Карт и т.д.): ## +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs Координаты в конической равнопромежуточной проекции: ## +proj=eqdc +lat_0=0 +lon_0=0 +lat_1=60 +lat_2=60 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs Координаты в проекции UTM, зона 37: ## +proj=utm +zone=37 +datum=WGS84 +units=m +no_defs Запись координат в формате WKT предполагает представление вышеуказанных компонент пространственной привязки к виде иерерхического списка. Например, так будет выглядеть информация о полярной стереографической проекции для карт России: PROJCS[&quot;WGS 84 / EPSG Russia Polar Stereographic&quot;, GEOGCS[&quot;WGS 84&quot;, DATUM[&quot;WGS_1984&quot;, SPHEROID[&quot;WGS 84&quot;,6378137,298.257223563, AUTHORITY[&quot;EPSG&quot;,&quot;7030&quot;]], AUTHORITY[&quot;EPSG&quot;,&quot;6326&quot;]], PRIMEM[&quot;Greenwich&quot;,0, AUTHORITY[&quot;EPSG&quot;,&quot;8901&quot;]], UNIT[&quot;degree&quot;,0.0174532925199433, AUTHORITY[&quot;EPSG&quot;,&quot;9122&quot;]], AUTHORITY[&quot;EPSG&quot;,&quot;4326&quot;]], PROJECTION[&quot;Polar_Stereographic&quot;], PARAMETER[&quot;latitude_of_origin&quot;,90], PARAMETER[&quot;central_meridian&quot;,105], PARAMETER[&quot;scale_factor&quot;,0.994], PARAMETER[&quot;false_easting&quot;,2000000], PARAMETER[&quot;false_northing&quot;,2000000], UNIT[&quot;metre&quot;,1, AUTHORITY[&quot;EPSG&quot;,&quot;9001&quot;]], AXIS[&quot;X&quot;,EAST], AXIS[&quot;Y&quot;,NORTH], AUTHORITY[&quot;EPSG&quot;,&quot;5940&quot;]] EPSG (European Petroleum Survey Group) — европейская рабочая группа нефтегазовой области, которая ведет реестр систем координат с уникальными цифровыми кодами вида EPSG:xxxxxx. Коды EPSG оказались настолько удобны, что используются повсеместно для быстрой инициализации проекций со стандартными параметрами. Например, вышеприведенные проекции имеют следующие коды EPSG: WGS84: EPSG:4326 Web Mercator: EPSG:3857 UTM: EPSG:326.. , например для UTM 37N: EPSG:32637 6.2.3 Преобразование координат Преобразование координат включает три различных операции: Трансформирование — пересчет географических координат с одного датума на другой Проецирование — переход от географических координат к плоским прямоугольным Обратное проецирование — переход от плоских координат к прямоугольным. Например, чтобы пересчитать координаты UTM в проекцию Гаусса-Крюгера, необходимо: Обратно проецировать координаты в географические WGS84 Трансформировать географические координаты c WGS84 в ГСК-2011 Проецировать координаты ГСК-2011 в проекцию Гаусса-Крюгера Несоответствие датумов часто является причиной того, что данные из разных наборов плохо совмещаются друг с другом 6.3 Векторные данные 6.4 Растровые данные 6.5 Контрольные вопросы и задачи 6.5.1 Вопросы 6.5.2 Задачи ГОСТ Р 52438-2005 &lt;&gt;. В стандарте поясняется, что объектом может быть неподвижный или движущийся простой или сложный объект, явление, событие, процесс и ситуация. Моделируемый объект может относиться к территории, акватории, недрам и воздушному пространству Земли, околоземному космическому пространству, другим космическим телам и небесной сфере. В широком смысле под пространственным объектом в геоинформатике понимается как сам объект, так и адекватная ему цифровая модель↩ Названия перечисленных компонент геометрии растра укоренились благодаря распространенности стандарта Esri ASCII Grid↩ "]
]
