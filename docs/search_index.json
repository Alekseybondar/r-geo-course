[
["thematic-mapping-new.html", "Глава 10 Тематические карты в R Предварительные условия 10.1 Введение 10.2 Тематические карты tmap 10.3 Классификация 10.4 Фасетные карты 10.5 Контрольные вопросы и упражнения", " Глава 10 Тематические карты в R Предварительные условия Для выполнения кода данной лекции вам понадобятся следующие пакеты: library(sf) library(tmap) library(readxl) library(raster) library(mapview) library(classInt) library(gapminder) library(tidyverse) library(googlesheets) library(rnaturalearth) 10.1 Введение Тематические карты представляют собой важный инструмент географических исследований. Таблицы и графики не дают полного представления о пространственном распределении изучаемого явления. Это знание способна дать исследователю карта. Разнообразие типов и видов карт достаточно велико. Комплексные картографические произведения, содержащие многослойный набор объектов, создаются, как правило, средствами геоинформационных пакетов. Такие карты требуют тщательной и кропотливой работы с легендой, устранения графических конфликтов между знаками, многократного редактирования входных данных, условий, фильтров и способов изображения в попытке достичь эстетичного и вместе с тем информативного результата. В то же время, гораздо большее количество создаваемых в повседневной практике карт носят простой аналитический характер. Такие карты показывают одно, максимум два явления, и могут иллюстрировать входные данные, результаты промежуточных или итоговых расчетов. Создание именно таких карт целесообразно автоматизировать средствами программирования. В этом разделе мы познакомимся с созданием тематических карт средствами пакета tmap. В качестве источника открытых данных мы будем использовать Natural Earth и WorldClim. 10.1.1 Данные Natural Earth Natural Earth — это открытые мелкомасштабные картографические данные высокого качества. Данные доступны для трех масштабов: 1:10М, 1:50М и 1:110М. Для доступа к этимм данным из среды R без загрущзки исходных файлов можно использоват пакет rnaturalearth. Пакет позволяет выгружать данные из внешнего репозитория, а также содержит три предзакачанных слоя: ne_countries() границы стран ne_states() границы единиц АТД 1 порядка ne_coastline() береговая линия Для загрузки других слоев необходимо использовать функцию ne_download(), передав ей масштаб, название слоя и его категорию: countries = ne_countries() %&gt;% st_as_sf() coast = ne_coastline() %&gt;% st_as_sf() ocean = ne_download(scale = 110, type = &#39;ocean&#39;, category = &#39;physical&#39;) %&gt;% st_as_sf() ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/private/var/folders/h1/_pw8qgdd6y7gy251_ttnq8240000gn/T/RtmpvLplh1&quot;, layer: &quot;ne_110m_ocean&quot; ## with 2 features ## It has 3 fields plot(countries %&gt;% st_geometry(), border = &#39;grey&#39;) plot(ocean, col = &#39;lightblue&#39;, add = TRUE) plot(coast, add = TRUE, col = &#39;steelblue&#39;) Перед построением карт мира данные целесообразно спроецировать. Чтобы не трансформировать каждый слой отдельно, можно объединить слои в список и воспользоваться функционалом lapply для множественного трансформирования: lyr = list(ocean = ocean, countries = countries, coast = coast) lyrp = lapply(lyr, st_transform, crs = &quot;+proj=eck3&quot;) # Псевдоцилиндрическая проекция Эккерта g = st_graticule(lyrp$ocean) %&gt;% st_geometry() plot(lyrp$countries %&gt;% st_geometry(), border = &#39;grey&#39;, graticule = TRUE, axes = TRUE) plot(lyrp$ocean, col = &#39;lightblue&#39;, border = &#39;steelblue&#39;, add = TRUE) plot(g, lty = 3, add = TRUE) 10.1.2 Данные WorldClim WorldClim — это открытые сеточные наборы климатических характеристик с пространственным разрешением от \\(30&#39;&#39;\\) (около 1 км) до \\(10&#39;\\) (около 20 км). Данные можно выгрузить в виде файлов GeoTiff, однако эту операцию можно сделать и программным путем через пакет raster — используя функцию getData(). Выполним загрузку 10-минутного растра с суммарным количеством осадков за год: prec = getData(&quot;worldclim&quot;, var = &quot;prec&quot;, res = 10) %&gt;% projectRaster(crs = &quot;+proj=eck3&quot;) class(prec) # это 12-канальный растр ## [1] &quot;RasterBrick&quot; ## attr(,&quot;package&quot;) ## [1] &quot;raster&quot; Визуализируем на карте ramp = colorRampPalette(c(&quot;white&quot;, &quot;violetred&quot;)) # Визуализируем данные на январь: plot(prec, 1, col = ramp(10), main = &#39;Количество осадков в январе, мм&#39;, box = FALSE, axes = FALSE) plot(lyrp$ocean, add = TRUE, border = &#39;steelblue&#39;, col = &#39;lightblue&#39;) Использовать программную загрузку целесообразно для небольших наборов данных. Если счет пошел на десятки мегабайт и выше, следует все-таки выкачать данные в виде файла и работать с ним 10.2 Тематические карты tmap Пакет tmap предоставляет простой в использовании и достаточно мощный механизм формирования тематических карт. Шаблон построения карты в этом пакете напоминает ggplot и выглядит следующим образом: tm_shape(&lt;DATA&gt;) + tm_&lt;METHOD&gt;(&lt;PARAMETERS&gt;) где: DATA - объект пространственного типа (sf, sp, stars или raster) METHOD - метод визуализации этого объекта (спопоб изображения) PARAMETERS - параметры метода 10.2.1 Векторные карты Для реализации качественного и количественного фона, а также картограмм используется метод tm_polygons(). Он автоматически определяет тип переменной и строит соответствующую шкалу: tm_shape(lyrp$countries) + tm_polygons(&#39;economy&#39;) # качественная переменная Количественный фон или картограммы получаются при картографировании числового показателя: (&#39;1H3nzTwbn8z4lJ5gJ_WfDgCeGEXK3PVGcNjQ_U5og8eo&#39; %&gt;% # продолжительность жизни gs_key(lookup = FALSE) %&gt;% # не используем авторизацию gs_read(ws = 1) %&gt;% rename(name = 1) %&gt;% gather(year, lifexp, -name) %&gt;% filter(year == 2016) %&gt;% left_join(read_excel(&#39;gapminder.xlsx&#39;, 2)) %&gt;% mutate(geo = stringr::str_to_upper(geo)) -&gt; lifedf) # выгружаем данные по ВВП на душу населения и сохраняем в переменную lifedf ## # A tibble: 260 x 13 ## name year lifexp geo four_regions eight_regions six_regions ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Abkh… 2016 NA &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 2 Afgh… 2016 52.7 AFG asia asia_west south_asia ## 3 Akro… 2016 NA &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 4 Alba… 2016 78.1 ALB europe europe_east europe_cen… ## 5 Alge… 2016 76.5 DZA africa africa_north middle_eas… ## 6 Amer… 2016 73 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 7 Ando… 2016 84.8 AND europe europe_west europe_cen… ## 8 Ango… 2016 60 AGO africa africa_sub_s… sub_sahara… ## 9 Angu… 2016 NA &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; ## 10 Anti… 2016 76.5 ATG americas america_north america ## # ... with 250 more rows, and 6 more variables: members_oecd_g77 &lt;chr&gt;, ## # Latitude &lt;dbl&gt;, Longitude &lt;dbl&gt;, `UN member since` &lt;dttm&gt;, `World bank ## # region` &lt;chr&gt;, `World bank income group 2017` &lt;chr&gt; coun = lyrp$countries %&gt;% left_join(lifedf, by = c(&#39;adm0_a3&#39; = &#39;geo&#39;)) tm_shape(coun) + tm_polygons(&#39;lifexp&#39;) # количественная переменная Для реализации способа картодиаграмм используется геометрия tm_bubbles(). Чтобы оставить отображение границ полигонов, нам необходимо к одной геометрии применить несколько способов изображения: tm_shape(lyrp$ocean)+ tm_fill(col = &#39;lightblue&#39;) + tm_shape(coun) + tm_fill(col = &#39;white&#39;) + tm_borders(col = &#39;grey&#39;) + tm_bubbles(&#39;gdp_md_est&#39;, scale = 3, col = &#39;red&#39;, alpha = 0.5) # количественная переменная 10.2.2 Растровые карты При отображении растровых данных используется способ отображения tm_raster(): tm_shape(prec) + tm_raster(&#39;prec1&#39;, breaks = c(10, 50, 100, 200, 500, 1000), palette = ramp(5), title = &#39;мм&#39;) + tm_layout(legend.position = c(&#39;left&#39;, &#39;bottom&#39;), fontfamily = &#39;OpenSans&#39;, main.title.size = 1.2, main.title = &#39;Среднемноголетнее количество осадков в январе&#39;) + tm_shape(lyrp$ocean) + tm_fill(col = &#39;lightblue&#39;) + tm_borders(col = &#39;steelblue&#39;) 10.3 Классификация 10.3.1 Методы классификации Классификация данных — важнейший этап картографирования, который во многом определяет, как данные будут представлены на карте и какие географические выводы читатель сделает на ее основе. Существует множество методов классификации числовых рядов. Классифицировать данные автоматически можно с помощью функции classIntervals() из пакета classInt. Наберите в консоли ?classInt чтобы прочитать справку о методах классификации. Посмотрим несколько методов классификации. Первый параметр функции classInt — это числовой ряд. Число классов следует передать в параметр n =, метод классификации указывается в параметре style =. Для начала попробуем метод равных интервалов, который просто делит размах вариации (диапазон от минимума до максимум) на \\(n\\) равных интервалов. Функция plot() применительно к созданной классификации рисует замечательный график, на котором показаны границы классов и эмпирическая функция распределения показателя. В параметр pal можно передать цветовую палитру: # Запишем число классов в переменную nclasses = 5 intervals = classIntervals(coun$lifexp, n = nclasses, style = &quot;equal&quot;) # извлечь полученные границы можно через $brks intervals$brks ## [1] 48.860 55.748 62.636 69.524 76.412 83.300 plot(intervals, pal = ramp(nclasses), cex=0.5, main = &quot;Равные интервалы MIN/MAX&quot;) Cозданные интервалы хоть и равны, но не аккуратны. Зато метод классификации &quot;pretty&quot; создает также равные интервалы, но может слегка расширить диапазон или добавить 1 класс, чтобы получить границы интервалов, округленные до целых чисел: intervals = classIntervals(coun$lifexp, n = nclasses, style = &quot;pretty&quot;) intervals$brks ## [1] 45 50 55 60 65 70 75 80 85 plot(intervals, pal = ramp(nclasses), cex=0.5, main = &quot;Округленные равные интервалы&quot;) Квантили — равноколичественные интервалы. В каждом классе содержится одинаковое число объектов: intervals = classIntervals(coun$lifexp, n = nclasses, style = &quot;quantile&quot;) intervals$brks ## [1] 48.860 64.488 71.300 75.440 79.360 83.300 plot(intervals, pal = ramp(nclasses), cex=0.5, main = &quot;Квантили (равноколичественные)&quot;) Метод “естественных интервалов”, или метод Фишера-Дженкса позволяет найти классы, максимально однородные внутри и при этом максимально отличающиеся друг от друга: intervals = classIntervals(coun$lifexp, n = nclasses, style = &quot;jenks&quot;) intervals$brks ## [1] 48.86 55.90 63.70 70.40 77.10 83.30 plot(intervals, pal = ramp(nclasses), cex=0.5, main = &quot;Естественные интервалы&quot;) 10.3.2 Применение на картах 10.4 Фасетные карты 10.4.1 Интерактивный режим Любую карту tmap можно превести в интерактивный режим с помощью функции tmap_mode() с параметром 'view': tmap_mode(&#39;view&#39;) tm_shape(coun) + tm_polygons(&#39;lifexp&#39;) # количественная переменная Чтобы добавить карту-подложку, необходимо предварительно вызвать функцию tm_basemap(), передав ей название картографического сервиса: tm_basemap(&quot;OpenStreetMap&quot;) + tm_shape(coun) + tm_polygons(&#39;lifexp&#39;, alpha = 0.5) # количественная переменная 10.5 Контрольные вопросы и упражнения 10.5.1 Вопросы 10.5.2 Упражнения Используя возможности пакетов rnaturalearth и tmap, создпайте карту мира, в которой страны раскрашены в соответствии с континентом (переменная continent). Визуализируйте ее в статичном и интерактивном режиме. Выполните выборку стран на Европейский континент. Трансформируйте данные о странах в коническую равнопромежуточную проекцию. Визуализируйте численность населения по странам (переменная pop_est) способом картодиаграмм. Добавьте на карту реки, озера и города, используя возможности ne_download(). Самсонов Т.Е. Визуализация и анализ географических данных на языке R. М.: Географический факультет МГУ, 2017. DOI: 10.5281/zenodo.901911 "]
]
